# Maintainer: Zelun Kong <zelun.kong@outlook.com>

pkgname=llvm-project-latest
pkgver=19.1.6
pkgrel=1
epoch=
pkgdesc="Collection of modular and reusable compiler and toolchain technologies"
arch=('x86_64')
url="https://llvm.org/"
license=('KZL')
source=(git+https://github.com/llvm/llvm-project.git#tag=llvmorg-$pkgver
        x86_64-unknown-linux-gnu.conf)
sha256sums=('bea3dbf8d9cffa7f288868bf7d8e6d55980182ac0edc246985259e32619f5182'
            '35c30e43af264666d74e2b8fcfe07fb566b8f72001dc90bca8a76c1151d18bad')

# https://releases.llvm.org/19.1.0/docs/CMake.html

prefix="usr/local"

_cmake_options=(
  -DCMAKE_BUILD_TYPE=Release
  -DCMAKE_INSTALL_PREFIX="/$prefix"
  -DCMAKE_INSTALL_LIBEXECDIR="libexec/llvm-${pkgver%%.*}"
  -DPython3_EXECUTABLE=$(which python3.12)
  -DCMAKE_C_FLAGS="${CFLAGS/-O2/-O3} $CPPFLAGS"
  -DCMAKE_CXX_FLAGS="${CXXFLAGS/-O2/-O3} $CPPFLAGS"
  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
)

_llvm_options=(
  # -DLLVM_HOST_TRIPLE="$CHOST"
  # -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-unknown-linux-gnu"
  ### bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl;flang
  -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;lldb;flang"
  ### libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc;offload
  -DLLVM_ENABLE_RUNTIMES="libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp"
  -DLLVM_TARGETS_TO_BUILD="X86"
  -DLLVM_PARALLEL_COMPILE_JOBS="$(nproc)"
  -DLLVM_PARALLEL_LINK_JOBS="$(nproc)"
  -DLLVM_BUILD_LLVM_DYLIB=ON
  -DLLVM_LINK_LLVM_DYLIB=ON
  ################################################################
  -DLLVM_INCLUDE_TOOLS=ON
  -DLLVM_BUILD_TOOLS=ON
  -DLLVM_INCLUDE_DOCS=OFF
  -DLLVM_BUILD_DOCS=OFF
  -DLLVM_INCLUDE_EXAMPLES=OFF
  -DLLVM_BUILD_EXAMPLES=OFF
  -DLLVM_INCLUDE_TESTS=OFF
  -DLLVM_BUILD_TESTS=OFF
  -DLLVM_INCLUDE_BENCHMARKS=OFF
  -DLLVM_BUILD_BENCHMARKS=OFF
  ################################################################
  -DLLVM_ENABLE_FFI=ON
  -DLLVM_ENABLE_RTTI=ON
  -DLLVM_ENABLE_BINDINGS=OFF
  -DLLVM_ENABLE_ZSTD=FORCE_ON
  -DLLVM_INSTALL_UTILS=ON
  -DLLVM_APPEND_VC_REV=OFF
)

_clang_options=(
  -DCLANG_ENABLE_BOOTSTRAP=OFF
  -DCLANG_DEFAULT_LINKER=lld
)

_stage1_options=(
  ################################################################
  ### rtlib
  ################################################################
  -DCLANG_DEFAULT_RTLIB=libgcc
  ################################################################
)

_stage2_options=(
  -DCMAKE_C_COMPILER="/$prefix/bin/clang"
  -DCMAKE_CXX_COMPILER="/$prefix/bin/clang++"
  ### LLVM_ENABLE_LLD and LLVM_USE_LINKER can't be set at the same time
  # -DLLVM_USE_LINKER=lld
  -DLLVM_ENABLE_LLD=ON
  -DLLVM_ENABLE_LTO=ON
  -DLLVM_ENABLE_FATLTO=ON
  -DLLVM_ENABLE_Z3_SOLVER=ON
  ################################################################
  ### rtlib
  ################################################################
  -DCLANG_DEFAULT_RTLIB=compiler-rt
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON
  ################################################################
  ### libc/libc++
  ################################################################
  -DLLVM_ENABLE_LLVM_LIBC=ON
  -DLLVM_ENABLE_LIBCXX=ON
  -DCLANG_DEFAULT_CXX_STDLIB=libc++
  -DLIBC_ENABLE_USE_BY_CLANG=ON
  -DLIBCXX_USE_COMPILER_RT=ON
  -DLIBCXXABI_USE_COMPILER_RT=ON
  -DLIBCXXABI_USE_LLVM_UNWINDER=ON
  ################################################################
)

prepare() {
  cd llvm-project

  local -a _options=("${_cmake_options[@]}"  "${_llvm_options[@]}" "${_clang_options[@]}")

  if [[ -f "/$prefix/bin/llvm-config" ]]; then
    _options+=("${_stage2_options[@]}")
  else
    _options+=("${_stage1_options[@]}")
  fi

  cmake \
    "${_options[@]}" \
    -S llvm \
    -B build \
    -G Ninja \
    -LAH
}

build() {
  cd llvm-project

  ninja -C build
}

package() {
  cd llvm-project

  DESTDIR="$pkgdir" ninja -C build install

  install -Dm644 -t "$pkgdir"/etc/ld.so.conf.d/ "$srcdir"/x86_64-unknown-linux-gnu.conf
}
