# Maintainer: Zelun Kong <zelun.kong@outlook.com>

pkgname=llvm-project
pkgver=16.0.6
pkgrel=1
epoch=
pkgdesc="Collection of modular and reusable compiler and toolchain technologies"
arch=('x86_64')
url="https://llvm.org/"
license=('KZL')
source=(git+https://github.com/llvm/llvm-project.git#tag=llvmorg-$pkgver)
sha256sums=('SKIP')

# https://llvm.org/docs/CMake.html

### full list of projects (find in CMake output)
# bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl;flang

### full list of runtimes (find in CMake output)
# libc;libunwind;libcxxabi;pstl;libcxx;compiler-rt;openmp;llvm-libgcc

_cmake_options=(
  -DCMAKE_BUILD_TYPE=Release
  -DCMAKE_INSTALL_PREFIX=/opt/llvm-project
  -DCMAKE_INSTALL_LIBDIR=lib
  -DPython3_EXECUTABLE=/usr/local/bin/python3.12
  ################
  # stage 2
  ################
  -DCMAKE_C_COMPILER=/opt/llvm-project/bin/clang
  -DCMAKE_CXX_COMPILER=/opt/llvm-project/bin/clang++
  ################
  -DCMAKE_C_FLAGS="${CFLAGS/-O2/-O3} $CPPFLAGS"
  -DCMAKE_CXX_FLAGS="${CXXFLAGS/-O2/-O3} $CPPFLAGS"
)

_llvm_options=(
  -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;lldb"
  -DLLVM_ENABLE_RUNTIMES="compiler-rt"
  -DLLVM_TARGETS_TO_BUILD="X86"
  -DLLVM_PARALLEL_COMPILE_JOBS="$(nproc)"
  -DLLVM_PARALLEL_LINK_JOBS="$(nproc)"
  -DLLVM_BUILD_LLVM_DYLIB=ON
  -DLLVM_LINK_LLVM_DYLIB=ON
  -DLLVM_INCLUDE_DOCS=OFF
  -DLLVM_BUILD_DOCS=OFF
  -DLLVM_INCLUDE_TESTS=OFF
  -DLLVM_BUILD_TESTS=OFF
  -DLLVM_INCLUDE_BENCHMARKS=OFF
  -DLLVM_BUILD_BENCHMARKS=OFF
  -DLLVM_ENABLE_BINDINGS=OFF
  -DLLVM_ENABLE_FFI=ON
  -DLLVM_ENABLE_RTTI=ON
  -DLLVM_INSTALL_UTILS=ON
  ################################################################
  # libc/libc++
  ################################################################
  # For llvm17+
  # -DLLVM_ENABLE_LLVM_LIBC=OFF
  -DLLVM_ENABLE_LIBCXX=OFF
  ################################################################
  # stage 2
  ################################################################
  -DLLVM_USE_LINKER=lld
  -DLLVM_ENABLE_LTO=Thin
  ################################################################
  -DLLVM_APPEND_VC_REV=OFF
)

_clang_options=(
  -DCLANG_ENABLE_BOOTSTRAP=OFF
  -DCLANG_DEFAULT_LINKER=lld
  ################################################################
  # rtlib
  ################################################################
  # -DCLANG_DEFAULT_RTLIB=compiler-rt
  -DCLANG_DEFAULT_RTLIB=libgcc
  ################################################################
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON
  ################################################################
  # libc++
  ################################################################
  # -DCLANG_DEFAULT_CXX_STDLIB=libc++
  # -DLIBCXX_USE_COMPILER_RT=ON
  # -DLIBCXXABI_USE_COMPILER_RT=ON
  # -DLIBCXXABI_USE_LLVM_UNWINDER=ON
  ################################################################
)

################################################################################

build() {
  cd $pkgname

  cmake \
    "${_cmake_options[@]}" \
    "${_llvm_options[@]}" \
    "${_clang_options[@]}" \
    -S llvm \
    -B build \
    -G Ninja \
    -LAH

  ninja -C build
}

package() {
  cd $pkgname

  DESTDIR="$pkgdir" ninja -C build install
}
