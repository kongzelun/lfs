#!/bin/bash
#
# mkiso
#

script_name="$(basename "$0")"
script_path="$(readlink -f "$0")"
script_dir="$(dirname "$script_path")"

chroot_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
debootstrap_suite="jammy"
# debootstrap_suite="noble"

work_dir="/tmp/ubuntu-rootfstmp"
debootstrap_dir="$work_dir"/rootfs
rootfs_archive_name="ubuntu_rootfs-$(date +%Y%m%d)-$debootstrap_suite.tar.zstd"
isofs_dir="$work_dir"/iso
install_dir="LiveOS"
iso_name="Ubuntu-KZL"
iso_label="LIVEOS"
iso_publisher="Ubuntu-KZL <https://github.com/lz3450/LFS>"
iso_application="Ubuntu-KZL Live/Rescue CD"
iso_version="$(date +%Y%m%d)"
out_dir="$script_dir"
iso_image_name="$iso_name-$iso_version-$debootstrap_suite.iso"
log_dir="$work_dir"/log

deb_pkgs=(
    sudo
    dosfstools
    f2fs-tools
    wpasupplicant
    wget curl
    nano
    openssh-server
    git
    bash-completion
    zsh
    linux-image-generic
    libarchive-tools
    libgpgme-dev
    ### noble
    # systemd-boot
    # systemd-resolved
)
pacman_pkgs=(
    pacman
    pacman-contrib
    linux
    debootstrap
)

# Options
no_update_rootfs=0


# Show an INFO message
# $1: message string
info() {
    local _msg="$1"
    printf '\033[0;32m[%s] INFO: %s\033[0m\n' "$script_name" "$_msg"
}

# Show a WARNING message
# $1: message string
warning() {
    local _msg="$1"
    printf '\033[0;33m[%s] WARNING: %s\033[0m\n' "$script_name" "$_msg" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
error() {
    local _msg="$1"
    local _error="$2"
    printf '\033[0;31m[%s] ERROR: %s\033[0m\n' "$script_name" "$_msg" >&2
    if [[ "$_error" -gt 0 ]]; then
        exit "$_error"
    fi
}

usage() {
    local _usage="
    Usage: $script_name [ -h | --help ] [ -n | --no-update-rootfs ]

    -h, --help                      display this help message and exit
    -n, --no-update-rootfs          do not update rootfs
"
    echo "$_usage"
}

create_work_dir() {
    # Create working directory
    if [[ -d "$work_dir" ]]; then
        read -p "Work directory exists. Do you want to delete it? (Y/n) " answer
        if [[ -z "$answer" || "$answer" == "Y" || "$answer" == "y" ]]; then
            rm -r -- "$work_dir"
            install -d -- "$work_dir"
        fi
    else
        install -d -- "$work_dir"
    fi
}

make_rootfs() {
    install -dm0755 -o 0 -g 0 -- "$debootstrap_dir"
    install -dm0755 -- "$isofs_dir/$install_dir"
    install -dm0755 -- "$log_dir"

    # Write build date to file
    printf '%s\n' "$(date '+%Y/%m/%d %H:%M:%S')" > "$isofs_dir/build_time.txt"

    # Copy custom root file system files.
    if [ -d "$script_dir/rootfs" ]; then
        if [[ "$no_update_rootfs" -eq 0 ]]; then
            info "Update rootfs..."
            sudo -u $SUDO_USER ./update-rootfs &> "$log_dir"/rootfs_update.log || error "Failed to update rootfs" 1
            info "Done!"
        fi
        info "Copying custom rootfs files..."
        cp -af --no-preserve=ownership,mode -- "$script_dir"/rootfs/. "$debootstrap_dir"/
        unlink "$debootstrap_dir"/root/install
        cp -rLf --no-preserve=ownership,mode -- "$script_dir"/rootfs/root/install "$debootstrap_dir"/root/
        # Set ownership and mode for files and directories
        chown -fh -- 0:0 "$debootstrap_dir"/etc/shadow
        chmod -f -- 400 "$debootstrap_dir"/etc/shadow
        chown -fh -- 0:0 "$debootstrap_dir"/root
        chmod -f -- 750 "$debootstrap_dir"/root
        info "Done!"
    fi
}

bootstrap_rootfs() {
    local _pkg_list=("$@")

    info "Bootstraping rootfs..."
    # debootstrap
    debootstrap \
        --include="$(IFS=','; echo "${_pkg_list[*]}")" \
        --components=main,restricted,universe \
        --merged-usr \
        "$debootstrap_suite" \
        "$debootstrap_dir" \
        http://us.archive.ubuntu.com/ubuntu/ \
        &> "$log_dir"/debootstrap.log || error "Failed to bootstrap rootfs" 2
    ### noble
    # rmdir "$debootstrap_dir"/bin.usr-is-merged
    # rmdir "$debootstrap_dir"/sbin.usr-is-merged
    # rmdir "$debootstrap_dir"/lib.usr-is-merged
    info "Done!"
    info "Creating a list of installed deb packages..."
    debootstrap \
        --include="$(IFS=','; echo "${_pkg_list[*]}")" \
        --components=main,restricted,universe \
        --merged-usr \
        --print-debs \
        "$debootstrap_suite" \
        "$debootstrap_dir"/tmp \
        http://us.archive.ubuntu.com/ubuntu/ \
        > "$isofs_dir"/deb_pkglist.txt 2> /dev/null || error "Failed to bootstrap rootfs" 2
    info "Done!"
}

install_pacman_pkgs() {
    local _pkg_list=("$@")

    # pacstrap
    info "Installing pacman packages \"${_pkg_list[*]}\" to \"$debootstrap_dir/\"..."
    mkdir -m 0755 -p "$debootstrap_dir"/var/{cache/pacman/pkg,lib/pacman}
    mkdir -p "$debootstrap_dir"/home/.repository/kzl
    pacman -Sy -r "$debootstrap_dir" --noconfirm --cachedir "$debootstrap_dir"/home/.repository/kzl "${_pkg_list[@]}" &> "$log_dir"/pacman.log || error "Failed to install pacman packages" 4
    info "Done!"

    info "Creating a list of installed pacman packages..."
    pacman -Q --sysroot "$debootstrap_dir" > "$isofs_dir"/pkglist.txt
    info "Done!"

    info "Copying pacman repository to the ISO file system..."
    for pkg in $(ls "$debootstrap_dir"/home/.repository/kzl); do
        repo-add "$debootstrap_dir"/home/.repository/kzl/kzl.db.tar.zst "$debootstrap_dir"/home/.repository/kzl/"$pkg" &> "$log_dir"/pacman-repo-add.log
    done
    info "Done!"
}

_chroot_run() {
    LC_ALL=C PATH="$chroot_path" chroot "$debootstrap_dir" /bin/bash -c "$1"
}

configure_rootfs() {
    info "Configuring rootfs..."

    for fs in dev sys proc run; do
        mount --rbind /"$fs" "$debootstrap_dir/$fs"
        mount --make-rslave "$debootstrap_dir/$fs"
    done
    _chroot_run "systemctl enable systemd-networkd.service" &> "$log_dir"/systemd-networkd.log || error "Failed to enable systemd-networkd" 3
    _chroot_run "ldconfig"
    for fs in dev sys proc run; do
        umount -R "$debootstrap_dir"/$fs
    done
    info "Done!"
}

make_initramfs() {
    for kernel_version in $(ls "$debootstrap_dir"/usr/lib/modules); do
        info "Create initramfs for kernel version: $kernel_version"
        dracut --kver "$kernel_version" \
            --force \
            --add 'livenet dmsquash-live convertfs pollcdrom qemu qemu-net' \
            --omit 'plymouth' \
            --no-early-microcode \
            --strip \
            --nolvmconf \
            --nomdadmconf \
            --verbose \
            --no-hostonly \
            --zstd \
            --kernel-image "$debootstrap_dir/boot/vmlinuz-$kernel_version" \
            --kmoddir "$debootstrap_dir/lib/modules/$kernel_version" \
            "$debootstrap_dir/boot/initramfs-$kernel_version.img" &> "$log_dir"/dracut-$kernel_version.log
        info "Done!"
    done
}

make_efibootimg() {
    info "Setting up systemd-boot for UEFI booting..."

    # Calculate the required FAT image size in bytes
    # local imgsize=$(du -bc \
    #     "$debootstrap_dir/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
    #     "$script_dir/efiboot/loader.conf" \
    #     "$script_dir/efiboot/ubuntu-kzl.conf" \
    #     "$debootstrap_dir/boot/vmlinuz" \
    #     "$debootstrap_dir/boot/initramfs.img" \
    #     2>/dev/null | awk 'END { print $1 }')
    # info "Required FAT image size $imgsize bytes"
    # Convert from bytes to KiB and round up to the next full MiB with an additional MiB for reserved sectors.
    # local imgsize="$(awk 'function ceil(x){return int(x)+(x>int(x))} function byte_to_kib(x){return x/1024} function mib_to_kib(x){return x*1024} END {print mib_to_kib(ceil((byte_to_kib($1)+1024)/1024))}' \
    #     <<< "$imgsize")"
    # info "Required FAT image size $imgsize KiB"

    local imgsize=131072

    rm -f -- "$work_dir"/efiboot.img
    info "Creating FAT image of size: $imgsize KiB..."
    mkfs.fat -C -F 32 -n "ISO_EFI" "$work_dir"/efiboot.img "$imgsize" &>/dev/null

    # Create the default/fallback boot path in which a boot loaders will be placed later.
    mmd -i "$work_dir"/efiboot.img ::/EFI ::/EFI/BOOT

    # Copy systemd-boot EFI binary to the default/fallback boot path
    mcopy -i "$work_dir"/efiboot.img \
        "$debootstrap_dir"/usr/lib/systemd/boot/efi/systemd-bootx64.efi ::/EFI/BOOT/BOOTx64.EFI

    # Copy systemd-boot configuration files
    mmd -i "$work_dir"/efiboot.img ::/loader ::/loader/entries
    mcopy -i "$work_dir"/efiboot.img "$script_dir"/efiboot/loader.conf ::/loader/
    sed "s|%ISOLABEL%|$iso_label|g" "$script_dir"/efiboot/ubuntu-kzl.conf | mcopy -i "$work_dir"/efiboot.img - ::/loader/entries/ubuntu-kzl.conf
    sed "s|%ISOLABEL%|$iso_label|g" "$script_dir"/efiboot/ubuntu.conf | mcopy -i "$work_dir"/efiboot.img - ::/loader/entries/ubuntu.conf

    # Copy kernel and initramfs to FAT image
    for kernel_version in $(ls "$debootstrap_dir"/usr/lib/modules); do
        info "Copying kernel ($kernel_version) and initramfs to the FAT file system..."
        mcopy -i "$work_dir/efiboot.img" \
            "$debootstrap_dir"/boot/vmlinuz-$kernel_version \
            "$debootstrap_dir"/boot/initramfs-$kernel_version.img \
            ::/
        info "Done!"
    done
}

cleanup_rootfs() {
    info "Cleaning up rootfs..."
    # system
    rm -rf -- "$debootstrap_dir"/boot/*
    rm -rf -- "$debootstrap_dir"/dev/*
    rm -rf -- "$debootstrap_dir"/var/tmp/*
    rm -rf -- "$debootstrap_dir"/tmp/*
    rm -rf -- "$debootstrap_dir"/var/log/*

    # debootstrap
    rm -rf -- "$debootstrap_dir"/var/lib/apt/lists/*
    rm -rf -- "$debootstrap_dir"/var/cache/apt/archives/*.deb

    # pacman
    if [ -d "$debootstrap_dir/var/lib/pacman" ]; then
        find "$debootstrap_dir/var/lib/pacman" -maxdepth 1 -type f -delete
    fi
    if [ -d "$debootstrap_dir/var/lib/pacman/sync" ]; then
        find "$debootstrap_dir/var/lib/pacman/sync" -delete
    fi
    if [ -d "$debootstrap_dir/var/cache/pacman/pkg" ]; then
        find "$debootstrap_dir/var/cache/pacman/pkg" -type f -delete
    fi
    find "$work_dir" \( -name '*.pacnew' -o -name '*.pacsave' -o -name '*.pacorig' \) -delete

    # create an empty /etc/machine-id
    rm -f -- "$debootstrap_dir/etc/machine-id"
    printf '' > "$debootstrap_dir/etc/machine-id"

    info "Done!"
}

make_rootfs_archive() {
    info "Creating rootfs archive..."
    tar -cvf "$out_dir/$rootfs_archive_name" \
        --zstd -C "$debootstrap_dir" \
        . \
        &> "$log_dir"/tar.log
    chown $SUDO_UID:$SUDO_GID "$out_dir/$rootfs_archive_name"
    info "Done!"
}

make_rootfs_squashfs() {
    local image_path="$isofs_dir/$install_dir/squashfs.img"

    # Create a squashfs image and place it in the ISO 9660 file system.
    install -dm0755 -- "$isofs_dir/$install_dir"
    info "Creating SquashFS image, this may take some time..."
    mksquashfs "$debootstrap_dir" "$image_path" -noappend -comp xz -b 1M -Xbcj x86 -Xdict-size 1M
    info "Done!"
}

make_iso_image() {
    info "Creating ISO image..."
    mkdir -p "$isofs_dir"/EFI/BOOT
    mkdir -p "$isofs_dir"/loader/entries
    mcopy -i "$work_dir/efiboot.img" ::/EFI/BOOT/BOOTx64.EFI "$isofs_dir"/EFI/BOOT/BOOTx64.EFI
    mcopy -i "$work_dir/efiboot.img" ::/loader/loader.conf "$isofs_dir"/loader/loader.conf
    mcopy -i "$work_dir/efiboot.img" ::/loader/entries/ubuntu-kzl.conf "$isofs_dir"/loader/entries/ubuntu-kzl.conf
    mcopy -i "$work_dir/efiboot.img" ::/loader/entries/ubuntu.conf "$isofs_dir"/loader/entries/ubuntu.conf
    for kernel_version in $(ls "$debootstrap_dir"/usr/lib/modules); do
        case "-${kernel_version##*-}" in
            -generic) kernel_suffix="" ;;
            -KZL) kernel_suffix="-KZL" ;;
            *) kernel_suffix=""; warning "Unknown kernel version suffix: $kernel_version" ;;
        esac
        mcopy -i "$work_dir/efiboot.img" ::/vmlinuz-$kernel_version "$isofs_dir"/vmlinuz$kernel_suffix
        mcopy -i "$work_dir/efiboot.img" ::/initramfs-$kernel_version.img "$isofs_dir"/initramfs$kernel_suffix.img
    done
    xorriso \
        -as mkisofs \
        -iso-level 3 \
        -joliet \
        -joliet-long \
        -full-iso9660-filenames \
        -rational-rock \
        -volid "$iso_label" \
        -publisher "$iso_publisher" \
        -appid "$iso_application" \
        -preparer "prepared by kzl" \
        -partition_offset 16 \
        -append_partition 2 'C12A7328-F81F-11D2-BA4B-00A0C93EC93B' "$work_dir"/efiboot.img \
        -appended_part_as_gpt \
        -output "$out_dir/$iso_image_name" \
        "$isofs_dir/" &> "$log_dir"/xorriso.log || error "Failed to create ISO image" 5
    chown $SUDO_UID:$SUDO_GID "$out_dir/$iso_image_name"
    info "Done!"
}

build() {
    create_work_dir
    make_rootfs
    bootstrap_rootfs "${deb_pkgs[@]}"
    install_pacman_pkgs "${pacman_pkgs[@]}"
    configure_rootfs
    make_initramfs
    make_efibootimg
    cleanup_rootfs
    make_rootfs_archive
    make_rootfs_squashfs
    make_iso_image
}

clean() {
    info "Cleaning..."
    set +e

    if [[ -n "$debootstrap_dir" ]]; then
        for attempt in {1..10}; do
            for fs in dev/pts dev sys proc run; do
                mount | grep -q "$debootstrap_dir/$fs" && umount -R "$debootstrap_dir/$fs" 2> /dev/null
            done
            mount | grep -q "$debootstrap_dir" && umount -R "$debootstrap_dir" 2> /dev/null
            if [[ $? -ne 0 ]]; then
                break
            fi
            sleep 1
        done
    fi
}
trap clean INT EXIT

########################################################################################################################

set -e
set -o pipefail
set -u
# set -x


while (($# > 0 )); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -n|--no-update-rootfs)
        no_update_rootfs=1
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 127
        ;;
    esac
    shift
done

start_time=$(date +%s)

echo -e "\e[1;30m"
echo -e "****************************************************************"
echo -e "               Create Ubuntu-KZL Live/Rescue CD ISO             "
echo -e "****************************************************************"
echo -e "[$script_name]: Start time - $(date)"
echo -e "\e[0m"

build

end_time=$(date +%s)
total_time=$((end_time - start_time))

echo -e "\e[1;30m"
echo -e "****************************************************************"
echo -e "                Execution time Information                "
echo -e "****************************************************************"
echo -e "[$script_name]: End time - $(date)"
echo -e "[$script_name]: Total time - $(date -d@$total_time -u +%H:%M:%S)"
echo -e "\e[0m"
