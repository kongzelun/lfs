#!/usr/bin/bash
#
# mkiso.sh
#

set -e
set -u
set -o pipefail
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
BASH_LIB_DIR=${BASH_LIB_DIR:-"/home/kzl/LFS/bash/lib"}

################################################################################

### libraries
source "$BASH_LIB_DIR"/log.sh
source "$BASH_LIB_DIR"/util.sh
source "$BASH_LIB_DIR"/chroot.sh

### constants & variables
DISTRO="ubuntu"
ISO_NAME="Ubuntu-KZL"
declare -i no_update_rootfs=0
mutable_image_type="f2fs"

### libraries
source ../../kzl-linux/mkiso/libmkiso.sh

### constants & variables
VERSION="1.0"

UBUNTU_MIRROR="http://us.archive.ubuntu.com/ubuntu/"
UBUNTU_PACMAN_REPO="home/.repository/ubuntu"

debootstrap_suite=""

# deb package lists
common_deb_pkgs=(
    sudo
    nano
    parted fdisk
    dosfstools
    f2fs-tools
    smartmontools
    wpasupplicant
    wget curl
    openssh-server
    git
    bash-completion
    zsh
    linux-image-generic
    initramfs-tools
    ### pacman dependencies
    libarchive-tools
    libgpgme-dev
)
noble_deb_pkgs=(
    systemd-boot
    systemd-resolved
)
pacman_pkgs=(
    pacman
    pacman-contrib
    arch-install-scripts
    linux
    debootstrap
)

### functions
usage() {
    cat <<EOF
    Usage: $SCRIPT_NAME -h | --help
    Usage: $SCRIPT_NAME [ -n | --no-update-rootfs ] -s | --suite <suite>

    -h, --help                      display this help message and exit
    -n, --no-update-rootfs          do not update rootfs
    -s, --suite <suite>             debootstrap suite (jammy, noble)

EOF
}

debootstrap_rootfs() {
    local _pkg_list=("$@")

    info "Debootstrapping \"$ROOTFS_DIR/\": ${_pkg_list[*]}"
    # debootstrap
    debootstrap \
        --include="$(IFS=','; echo "${_pkg_list[*]}")" \
        --components=main,restricted,universe \
        --merged-usr \
        "$debootstrap_suite" \
        "$ROOTFS_DIR" \
        "$UBUNTU_MIRROR" \
        >"$LOG_DIR"/debootstrap.log 2>&1 || error "Failed to debootstrap rootfs" 4
    if [[ "$debootstrap_suite" == "noble" ]]; then
        rmdir -v "$ROOTFS_DIR"/bin.usr-is-merged
        rmdir -v "$ROOTFS_DIR"/sbin.usr-is-merged
        rmdir -v "$ROOTFS_DIR"/lib.usr-is-merged
    fi
    info "Done"

    info "Creating a list of installed deb packages..."
    debootstrap \
        --include="$(IFS=','; echo "${_pkg_list[*]}")" \
        --components=main,restricted,universe \
        --merged-usr \
        --print-debs \
        "$debootstrap_suite" \
        "$ROOTFS_DIR"/tmp \
        "$UBUNTU_MIRROR" \
        >"$ISOFS_DIR"/deb_pkglist.txt 2>/dev/null || warn "Failed to creating a list of installed deb packages"
    info "Done"
}

pacstrap_rootfs() {
    local _pkg_list=("$@")

    # pacstrap
    info "Pacstrapping \"$ROOTFS_DIR/\": ${_pkg_list[*]}"
    mkdir -p -- "$ROOTFS_DIR/$UBUNTU_PACMAN_REPO"
    pacstrap -c -G -M -- "$ROOTFS_DIR" "${_pkg_list[@]}" >"$LOG_DIR"/pacstrap.log 2>&1 || error "Failed to pacstrap packages" 5
    # pacman -Sy -r "$ROOTFS_DIR" --noconfirm --cachedir "$ROOTFS_DIR/$UBUNTU_PACMAN_REPO" "${_pkg_list[@]}" >"$LOG_DIR"/pacman.log 2>&1 || error "Failed to install pacman packages" 5
    info "Done"

    info "Creating a list of installed pacman packages..."
    pacman -Q --sysroot "$ROOTFS_DIR" >"$ISOFS_DIR"/pacman_pkglist.txt 2>/dev/null || warn "Failed to creating a list of installed pacman packages"
    info "Done"

    info "Copying pacman repository to the ISO file system..."
    for pkg in $(ls "$ROOTFS_DIR/$UBUNTU_PACMAN_REPO"); do
        repo-add "$ROOTFS_DIR"/$UBUNTU_PACMAN_REPO/ubuntu.db.tar.zst "$ROOTFS_DIR/$UBUNTU_PACMAN_REPO/$pkg" >"$LOG_DIR"/pacman-repo-add.log 2>&1
    done
    info "Done"
}

configure_rootfs() {
    info "Configuring rootfs..."

    install -d -m 1777 -- "$ROOTFS_DIR"/tmp
    chroot_setup "$ROOTFS_DIR" >"$LOG_DIR"/chroot-setup.log || error "Failed to setup chroot environment" 6
    chroot_run "$ROOTFS_DIR" systemctl enable systemd-networkd.service >"$LOG_DIR"/systemd-networkd.log 2>&1 || error "Failed to enable systemd-networkd" 6
    chroot_run "$ROOTFS_DIR" apt-get update && apt-get upgrade -y && apt-get dist-upgrade -y >"$LOG_DIR"/apt.log 2>&1 || error "Failed to run apt" 6
    chroot_run "$ROOTFS_DIR" ldconfig
    chroot_teardown >"$LOG_DIR"/chroot-teardown.log

    info "Done"
}

make_initramfs() {
    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        info "Create initramfs for kernel version: $kernel_version"
        dracut --kver "$kernel_version" \
            "${DRACUT_ARGUMENTS[@]}" \
            --kernel-image "$ROOTFS_DIR/boot/vmlinuz-$kernel_version" \
            --kmoddir "$ROOTFS_DIR/lib/modules/$kernel_version" \
            "$ROOTFS_DIR/boot/initramfs-$kernel_version.img" >"$LOG_DIR"/dracut-$kernel_version.log 2>&1
        info "Done"
    done
}

_get_kernel_suffix() {
    local _kernel_version="$1"
    case "-${_kernel_version##*-}" in
        -generic) echo "" ;;
        -KZL) echo "-KZL" ;;
        *) echo ""; warn "Unknown kernel version: $_kernel_version" ;;
    esac
}

make_efibootimg() {
    # Calculate the required FAT image size in bytes
    # local _imgsize=$(du -bc \
    #     "$ROOTFS_DIR/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
    #     "$SCRIPT_DIR/efiboot/loader.conf" \
    #     "$SCRIPT_DIR/efiboot/ubuntu-kzl.conf" \
    #     "$ROOTFS_DIR/boot/vmlinuz" \
    #     "$ROOTFS_DIR/boot/initramfs.img" \
    #     2>/dev/null | awk 'END { print $1 }')
    # info "Required FAT image size $_imgsize bytes"
    # Convert from bytes to KiB and round up to the next full MiB with an additional MiB for reserved sectors.
    # local _imgsize="$(awk 'function ceil(x){return int(x)+(x>int(x))} function byte_to_kib(x){return x/1024} function mib_to_kib(x){return x*1024} END {print mib_to_kib(ceil((byte_to_kib($1)+1024)/1024))}' \
    #     <<< "$_imgsize")"
    # info "Required FAT image size $_imgsize KiB"

    local _imgsize=131072

    info "Creating FAT image of size: $_imgsize Byte..."
    rm -f -- "$WORK_DIR"/efiboot.img
    mkfs.fat -C -F 32 -n "ISO_EFI" "$WORK_DIR"/efiboot.img "$_imgsize" >/dev/null 2>&1
    info "Done"

    info "Setting up systemd-boot for UEFI booting..."
    # Create the default/fallback boot path in which a boot loaders will be placed later.
    mmd -i "$WORK_DIR"/efiboot.img ::/EFI ::/EFI/BOOT
    # Copy systemd-boot EFI binary to the default/fallback boot path
    mcopy -i "$WORK_DIR"/efiboot.img \
        "$ROOTFS_DIR"/usr/lib/systemd/boot/efi/systemd-bootx64.efi \
        ::/EFI/BOOT/BOOTx64.EFI
    # Copy systemd-boot configuration files
    mmd -i "$WORK_DIR"/efiboot.img \
        ::/loader \
        ::/loader/entries
    mcopy -i "$WORK_DIR"/efiboot.img \
        "$SCRIPT_DIR"/efiboot/loader.conf \
        ::/loader/
    sed "s|%ISOLABEL%|$ISO_LABEL|g" "$SCRIPT_DIR"/efiboot/ubuntu-kzl.conf \
        | mcopy -i "$WORK_DIR"/efiboot.img - ::/loader/entries/ubuntu-kzl.conf
    sed "s|%ISOLABEL%|$ISO_LABEL|g" "$SCRIPT_DIR"/efiboot/ubuntu.conf \
        | mcopy -i "$WORK_DIR"/efiboot.img - ::/loader/entries/ubuntu.conf
    info "Done"

    # Copy kernel and initramfs to FAT image
    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        local _kernel_suffix="$(_get_kernel_suffix "$kernel_version")"
        info "Copying kernel ($kernel_version) and initramfs to the FAT file system..."
        mcopy -i "$WORK_DIR/efiboot.img" "$ROOTFS_DIR"/boot/vmlinuz-$kernel_version ::/vmlinuz$_kernel_suffix
        mcopy -i "$WORK_DIR/efiboot.img" "$ROOTFS_DIR"/boot/initramfs-$kernel_version.img ::/initramfs$_kernel_suffix.img
        info "Done"
    done
}

make_mutable_img() {
    info "Creating mutable image..."

    rm -f -- "$WORK_DIR"/mutable.img
    fallocate -l 64M "$WORK_DIR"/mutable.img
    mkfs -t "$mutable_image_type" -f -l MUTABLE "$WORK_DIR"/mutable.img >"$LOG_DIR"/mkfs-mutable.log 2>&1

    info "Done"
}

make_rootfs_squashfs() {
    local _image_path="$ISOFS_DIR/$INSTALL_DIR/squashfs.img"

    info "Creating rootfs SquashFS image, this may take some time..."

    # Create fstab
    printf "$FSTAB_ROW_FORMAT" \
        "LABEL=ISO_EFI" \
        "/boot" \
        "vfat" \
        "defaults" \
        "0" "2" >"$ROOTFS_DIR"/etc/fstab
    printf "$FSTAB_ROW_FORMAT" \
        "LABEL=MUTABLE" \
        "/home" \
        "$mutable_image_type" \
        "defaults" \
        "0" "2" >>"$ROOTFS_DIR"/etc/fstab
    # Create a squashfs image and place it in the ISO 9660 file system.
    mkdir -p -- "$ISOFS_DIR/$INSTALL_DIR"
    mksquashfs "$ROOTFS_DIR" "$_image_path" -comp zstd -b 1M -noappend

    info "Done"
}

configure_isofs() {
    local -a _efi_files=(
        "EFI/BOOT/BOOTx64.EFI"
        "loader/loader.conf"
        "loader/entries/ubuntu-kzl.conf"
        "loader/entries/ubuntu.conf"
    )

    info "Setting up systemd-boot for ISO file system..."

    mkdir -p -- "$ISOFS_DIR"/EFI/BOOT
    mkdir -p -- "$ISOFS_DIR"/loader/entries
    for _file in "${_efi_files[@]}"; do
        mcopy -i "$WORK_DIR/efiboot.img" \
            "::/$_file" \
            "$ISOFS_DIR/$_file"
    done
    info "Done"

    for kernel_version in $(ls "$ROOTFS_DIR"/usr/lib/modules); do
        local _kernel_suffix="$(_get_kernel_suffix "$kernel_version")"
        info "Copying kernel ($kernel_version) and initramfs to the ISO file system..."
        mcopy -i "$WORK_DIR/efiboot.img" \
            ::/vmlinuz$_kernel_suffix \
            ::/initramfs$_kernel_suffix.img \
            "$ISOFS_DIR"/
        info "Done"
    done
}

clean() {
    info "Cleaning..."
    set +e

    chroot_teardown

    info "Done"
    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap clean EXIT SIGINT SIGTERM SIGKILL

########################################################################################################################

while (($# > 0)); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -n|--no-update-rootfs)
        no_update_rootfs=1
        ;;
    -s|--suite)
        shift
        debootstrap_suite="$1"
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 127
        ;;
    esac
    shift
done

declare -a deb_pkgs
if [[ "$debootstrap_suite" == "jammy" ]]; then
    deb_pkgs=("${common_deb_pkgs[@]}")
elif [[ "$debootstrap_suite" == "noble" ]]; then
    deb_pkgs=("${common_deb_pkgs[@]}" "${noble_deb_pkgs[@]}")
else
    error "Unknown debootstrap suite: $debootstrap_suite" 127
fi

output_name="$ISO_NAME-$(date +%Y%m%d)-$debootstrap_suite"
rootfs_archive_name="$output_name.tar.zstd"
iso_image_name="$output_name.iso"

################################################################################

prologue

create_work_dir

make_rootfs
debootstrap_rootfs "${deb_pkgs[@]}"
pacstrap_rootfs "${pacman_pkgs[@]}"
configure_rootfs

make_initramfs
make_efibootimg

make_rootfs_archive "$rootfs_archive_name"

make_mutable_img

cleanup_rootfs
make_rootfs_squashfs
configure_isofs
make_iso_image "$iso_image_name"

epilogue

### error codes
# 2: Constant or variable is not set
# 3: Failed to update rootfs
# 4: Failed to debootstrap rootfs
# 5: Failed to pacstrap packages
# 6: Failed to configure rootfs
# 7: Failed to create ISO image
# 127: Unknown option
# 255: Must be run as root
