#!/usr/bin/bash
#
# updatepkg
#

set -e
# set -u
set -o pipefail
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
BASH_LIB_DIR=${BASH_LIB_DIR:-"/home/kzl/LFS/bash/lib"}

################################################################################

### libraries
source "$BASH_LIB_DIR"/log.sh

### constants & variables
PKGBUILDDIR="$(pwd)"
# PGP_KEY_SERVER="hkps://keyserver.ubuntu.com"
# PGP_KEY_SERVER="hkps://keys.openpgp.org"
# PGP_KEY_SERVER="hkps://pgp.mit.edu"

syncdeps='-d'
cleanbuild='-C'
declare -i increase=0
declare -i increase_only=0

### functions
have_function() {
	declare -f "$1" >/dev/null
}

usage() {
    cat << EOF

Update the \`pkgver\` of PKGBUILD

Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME [ -s ] [ -n ] [ -i ]
Usage: $SCRIPT_NAME -I

    -h, --help                  Display this help message and exit
    -s, --syncdeps              Install missing dependencies with pacman (default: no install)
    -n, --no-cleanbuild         Do not remove "\$srcdir/" dir before updating PKGBUILD (default: remove)
    -i, --increase-pkgrel       Increase "\$pkgrel" by 1 (default: no increase)
    -I, --increase-pkgrel-only  Increase "\$pkgrel" by 1 only (implies \`-i\`; default: no increase)

EOF
}

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -s|--syncdeps)
        syncdeps='-sr'
        ;;
    -n|--no-cleanbuild)
        cleanbuild=''
        ;;
    -i|--increase-pkgrel)
        increase=1
        ;;
    -I|--increase-pkgrel-only)
        increase=1
        increase_only=1
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 255
        ;;
    esac
    shift
done

################################################################################

# PKGBUILD
if [[ ! -f "PKGBUILD" ]]; then
   error 'PKGBUILD does not exist.' 2
fi
source PKGBUILD
current_version=$(grep -oP 'pkgver=\K.+$' PKGBUILD | sed 's/\.g.*//')
info "Current pkgver is $current_version"
current_pkgrel=$(grep -oP 'pkgrel=\K\d+$' PKGBUILD)
info "Current pkgrel is $current_pkgrel"

# PKGUPDATE
if [[ ! -f "PKGUPDATE" ]]; then
    error "PKGUPDATE does not exist." 3
fi
unset new_version srcdir build_system pre_update post_update
source PKGUPDATE || :
if [[ -z "$new_version" ]]; then
    error 'Cannot get new version' 5
fi
info "New pkgver is $new_version"

# update `pkgver` and `pkgrel`
result=$(vercmp $new_version $current_version)
if (( $result == 1 )); then
    info "PKGBUILD updated: $current_version => $new_version"
    sed -i "/^pkgver=/c\\pkgver=$new_version" PKGBUILD
    sed -i "/^pkgrel=/c\\pkgrel=1" PKGBUILD
    pkgver=$new_version
    info "Running updpkgsums..."
    updpkgsums || error "\`updpkgsums\` error" 7
    info "Done"
    # force cleanbuild
    cleanbuild='-C'
elif (( $result == 0 )); then
    info "No update for PKGBUILD"
    if (( $increase > 0 )); then
        info "Increase pkgrel..."
        new_pkgrel=$(($current_pkgrel + 1))
        sed -i "/^pkgrel=/s/$current_pkgrel/$new_pkgrel/" PKGBUILD
        info "New pkgrel is $new_pkgrel"
        if (( $increase_only > 0 )); then
            exit $result
        fi
    fi
elif (( $result == -1 )); then
    warn "Current version is newer"
else
    error "Unknown \`vercmp\` result" 8
fi

# makepkg.conf
if [[ -f "/etc/makepkg.conf" ]]; then
    . /etc/makepkg.conf
elif [[ -f "/usr/local/etc/makepkg.conf" ]]; then
    . /usr/local/etc/makepkg.conf
else
    error 'makepkg.conf NOT found' 4
fi

# run pre_update
if have_function 'pre_update'; then
    info "Running pre_update()..."
    pre_update || error "\`pre_update\` error" 6
    info "Done"
fi

# receive key id
cd "$PKGBUILDDIR"
if (( ${#validpgpkeys[@]} )); then
    if ! gpg --list-keys --with-colons "${validpgpkeys[@]}" > /dev/null 2>&1; then
        # gpg --keyserver "$PGP_KEY_SERVER" --recv-keys "${validpgpkeys[@]}" || error "\`gpg --recv-keys\` error" 11
        gpg --recv-keys "${validpgpkeys[@]}" || error "\`gpg --recv-keys\` error" 13
    fi
fi

info "Running \`makepkg -o\`..."
makepkg "$cleanbuild" "$syncdeps" -o --noconfirm || error "\`makepkg -o\` error" 9
info "Done"

# get build options
info "Getting build options..."
cd "$BUILDDIR/$pkgname/src"
if [[ "$build_system" == "autoconf" || "$build_system" == "meson" || "$build_system" == "cmake" ]]; then
    if [[ ! -d "$srcdir" ]]; then
        error "Cannot find source directory: $srcdir" 11
    fi

    cd "./$srcdir"
    case "$build_system" in
        autoconf)
            if [[ ! -f "configure" ]]; then
                error 'Cannot find `configure` script' 12
            fi
            ./configure --help=recursive > "$PKGBUILDDIR"/help.txt
            find . -name 'config.cache' | LC_ALL=C sort | while read -r file; do
                cat "$file" >> "$PKGBUILDDIR/config.cache"
            done
            ;;
        meson)
            if [[ ! -f "build/meson-logs/meson-log.txt" ]]; then
                error 'Cannot find `meson-log.txt`' 12
            fi
            awk '
            # Step 0: Remove lines starting with "Working directory:" or "Command line:"
            /^(Working directory:|Command line:|Cached command line:|Running command:)/ { next }

            # Step 1: Capture project name and version first
            /^Project name: / {
                if (!project) {  # Only capture if not already set
                    project = $3
                    print
                }
                next
            }

            /^Project version: / {
                if (!version) {  # Only capture if not already set
                    version = $3
                    print
                }
                next
            }

            # Step 2: Keep lines starting with an uppercase letter and containing ": "
            /^[A-Z].*: / { print; next }

            # Step 3: Start printing from the line matching "^project 1.0" (i.e. the header line)
            #         and continue printing until a line starting with a letter (not whitespace) is encountered.
            $0 ~ ("^" project " " version) { to_print = 1; print; next }
            to_print && /^[A-Za-z]/ { exit }
            to_print { print }
            ' build/meson-logs/meson-log.txt > "$PKGBUILDDIR"/meson-log.txt
            meson setup tmp > /dev/null 2>&1 && meson configure tmp > "$PKGBUILDDIR"/help.txt
            ;;
        cmake)
            if [[ ! -f "build/CMakeCache.txt" ]]; then
                error 'Cannot find `CMakeCache.txt`' 12
            fi
            cp build/CMakeCache.txt "$PKGBUILDDIR"/CMakeCache.txt
            cmake -LAH -S . -B tmp > /dev/null 2>&1 && cp tmp/CMakeCache.txt "$PKGBUILDDIR"/help.txt
            ;;
        *)
            # should not reach here
            error "Unknown build_system: $build_system" 12
            ;;
    esac
else
    info "Unknown build_system or it is not defined, skipping auto getting build options"
fi
info "Done"

# run post_update
cd "$PKGBUILDDIR"
if have_function 'post_update'; then
    info "Running post_update()..."
    post_update || error "\`post_update\` error" 14
    info "Done"
fi

### error codes
# 255: current version is newer
# 0: no update
# 1: updated
# 2: PKGBUILD does not exist
# 3: PKGUPDATE does not exist
# 4: makepkg.conf NOT found
# 5: cannot get new version
# 6: pre_update error
# 7: updpkgsums error
# 8: unknown vercmp result
# 9: makepkg error
# 10: build_system is not defined
# 11: cannot find source directory
# 12: build_system errors
# 13: gpg --recv-keys error
# 14: post_update error
exit $result
