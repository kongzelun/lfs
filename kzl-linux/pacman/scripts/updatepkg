#!/usr/bin/bash
#
# updatepkg
#

set -e
# set -u
set -o pipefail
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
BASH_LIB_DIR=${BASH_LIB_DIR:-"/home/kzl/LFS/bash/lib"}

################################################################################

### libraries
source "$BASH_LIB_DIR"/log.sh

### constants & variables
PKGBUILDDIR=$(pwd)

declare -i cleanbuild=1
declare -i increase=0

### functions
have_function() {
	declare -f "$1" >/dev/null
}

usage() {
    cat <<EOF

Update the \`pkgver\` of PKGBUILD

Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME [ -n ] [ -i ]

    -h, --help                  Display this help message and exit
    -n, --no-cleanbuild         Do not remove "\$srcdir/" dir before updating PKGBUILD (default: remove)
    -i, --increase-pkgrel       Increase "\$pkgrel" by 1 (default: no increase)

EOF
}

################################################################################

while (($# > 0)); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -n|--no-cleanbuild)
        cleanbuild=0
        ;;
    -i|--increase-pkgrel)
        increase=1
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 255
        ;;
    esac
    shift
done

################################################################################

if [[ ! -f "PKGBUILD" ]]; then
   error 'PKGBUILD does not exist.' 2
fi

if [[ ! -f "PKGUPDATE" ]]; then
    error "PKGUPDATE does not exist." 3
fi

if [[ -f "/etc/makepkg.conf" ]]; then
    source /etc/makepkg.conf
elif [[ -f "/usr/local/etc/makepkg.conf" ]]; then
    source /usr/local/etc/makepkg.conf
else
    error 'makepkg.conf NOT found' 4
fi

source PKGBUILD

unset new_version current_version pre_update post_update
source PKGUPDATE || :

if [[ -z "$new_version" ]]; then
    error 'Cannot get new version' 5
fi
info "New pkgver is $new_version"
current_version=${current_version:-$(grep -oP 'pkgver=\K.+$' PKGBUILD | sed 's/.g.*//')}
info "Current pkgver is $current_version"
current_pkgrel=$(cat PKGBUILD | grep -oP 'pkgrel=\K\d+$')
info "Current pkgrel is $current_pkgrel"

# run pre_update
if have_function 'pre_update'; then
    info "running pre_update()..."
    pre_update || error "\`pre_update\` error" 6
    cd "$PKGBUILDDIR"
fi

result=$(vercmp $new_version $current_version)
if (( $result == 1 )); then
    info "PKGBUILD updated: $current_version => $new_version"
    sed -i "/^pkgver=/s/$current_version/$new_version/" PKGBUILD
    sed -i "/^pkgrel=/s/$current_pkgrel/1/" PKGBUILD
    pkgver=$new_version
    info "running updpkgsums..."
    updpkgsums || error "\`updpkgsums\` error" 7
    # receive key id
    if (( ${#validpgpkeys[@]} )); then
        gpg --recv-keys "${validpgpkeys[@]}" || error "\`gpg --recv-keys\` error" 11
    fi
    # force cleanbuild
    cleanbuild=1
elif (( $result == 0 )); then
    info "PKGBUILD is up to date."
    if [[ $increase -gt 0 ]]; then
        info "increase pkgrel..."
        new_pkgrel=$((current_pkgrel + 1))
        sed -i "/^pkgrel=/s/$current_pkgrel/$new_pkgrel/" PKGBUILD
    fi
elif (( $result == -1 )); then
    warn "Current version is newer"
else
    error "Unknown \`vercmp\` result" 8
fi

if [[ $cleanbuild -gt 0 ]]; then
    makepkg -C -s -r -o --noconfirm || error "\`makepkg -o\` error" 9
else
    makepkg -s -r -o --noconfirm || error "\`makepkg -o\` error" 9
fi
# run post_update
info "running post_update()..."
post_update || error "\`post_update\` error" 10

### error codes
# 255: current version is newer
# 0: no update
# 1: updated
# 2: PKGBUILD does not exist
# 3: PKGUPDATE does not exist
# 4: makepkg.conf NOT found
# 5: cannot get new version
# 6: pre_update error
# 7: updpkgsums error
# 8: unknown vercmp result
# 9: makepkg error
# 10: post_update error
# 11: gpg --recv-keys error
exit $result
