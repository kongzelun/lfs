#!/usr/bin/bash
#
# updatepkg
#

script_name="$(basename "${0}")"

cleanbuild=1
increase=0

################################################################

# Show an INFO message
# $1: message string
info() {
    local _msg="$1"
    printf '\033[0;32m[%s] INFO: %s\033[0m\n' "$script_name" "$_msg"
}

# Show a WARNING message
# $1: message string
warning() {
    local _msg="$1"
    printf '\033[0;33m[%s] WARNING: %s\033[0m\n' "$script_name" "$_msg" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
error() {
    local _msg="$1"
    local _error="$2"
    printf '\033[0;31m[%s] ERROR: %s\033[0m\n' "$script_name" "$_msg" >&2
    if [[ "$_error" -gt 0 ]]; then
        exit "$_error"
    fi
}

have_function() {
	declare -f "$1" >/dev/null
}

usage() {
    local _usage="
updatepkg (kzl-linux)

Update the \`pkgver\` of PKGBUILD

Usage: updatepkg [ -n ] [ -i ]

    -h, --help                  Display this help message and exit
    -n, --no-cleanbuild         Do not remove "\$srcdir/" dir before updating PKGBUILD
    -i, --increase-pkgrel       Increase "\$pkgrel" by 1
"
    echo "$_usage"
}

################################################################

while (($# > 0)); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -n|--no-cleanbuild)
        cleanbuild=0
        ;;
    -i|--increase-pkgrel)
        increase=1
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 1
        ;;
    esac
    shift
done

set -e
set -o pipefail
set -u
# set -x

#
if [[ ! -f PKGBUILD ]]; then
   error 'PKGBUILD does not exist.' 2
fi

if [[ -f "/etc/makepkg.conf" ]]; then
    . /etc/makepkg.conf
elif [[ -f "/usr/local/etc/makepkg.conf" ]]; then
    . /usr/local/etc/makepkg.conf
else
    error 'makepkg.conf NOT found.' 5
fi
source PKGBUILD
PKGBUILDDIR=$(pwd)

if [[ ! -f PKGUPDATE ]]; then
    error "PKGUPDATE does not exist." 2
fi

unset new_version current_version pre_update post_update
source PKGUPDATE || :
if [[ -z "$new_version" ]]; then
    error 'Cannot get new version.' 6
fi
info "New pkgver is $new_version"
current_version=${current_version:-$(grep -oP 'pkgver=\K.+$' PKGBUILD | sed 's/.g.*//')}
info "Current pkgver is $current_version"
current_pkgrel=$(cat PKGBUILD | grep -oP 'pkgrel=\K\d+$')
info "Current pkgrel is $current_pkgrel"

# run pre_update
if have_function 'pre_update'; then
    info "running pre_update()..."
    pre_update || error "\`pre_update\` error" 4
fi

result=$(vercmp $new_version $current_version)
if [[ $result -eq 1 ]]; then
    info "PKGBUILD updated: $current_version => $new_version"
    sed -i "/^pkgver=/s/$current_version/$new_version/" PKGBUILD
    sed -i "/^pkgrel=/s/$current_pkgrel/1/" PKGBUILD
    pkgver=$new_version
    info "running updpkgsums..."
    updpkgsums || error "\`updpkgsums\` error" 2
    # force cleanbuild
    cleanbuild=1
elif [[ $result -eq 0 ]]; then
    info "PKGBUILD is up to date."
    if [[ $increase -gt 0 ]]; then
        info "increase pkgrel..."
        new_pkgrel=$((current_pkgrel + 1))
        sed -i "/^pkgrel=/s/$current_pkgrel/$new_pkgrel/" PKGBUILD
    fi
elif [[ $result -eq -1 ]]; then
    warning "Current version is newer."
else
    error "Unknow \`vercmp\` result." 7
fi

if [[ $cleanbuild -gt 0 ]]; then
    makepkg -Cdo || error "\`makepkg -Co\` error" 3
else
    makepkg -do || error "\`makepkg -o\` error" 3
fi
# run post_update
info "running post_update()..."
post_update || error "\`post_update\` error" 4

# -1: current version is newer
# 0: no update
# 1: updated
# 2: PKGUPDATE does not exist
# 3: makepkg -Co error
# 4: pre_update or post_update error
# 5: makepkg.conf not found
# 6: cannot get new version
# 7: unknow `vercmp` result
exit $result
