#!/usr/bin/bash
#
# updaterepo.sh
#

set -e
set -u
set -o pipefail
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
BASH_LIB_DIR=${BASH_LIB_DIR:-"/home/kzl/LFS/bash/lib"}

################################################################################

### libraries
source "$BASH_LIB_DIR"/log.sh

### constants & variables
REPO_ROOT="/home/.repository"
PACKAGE_DIR="$HOME/makepkg/packages"
ARCHIVE_DIR="$HOME/makepkg/archive"
EXTENSION="zst"

declare -i replace=0
declare -i clear=0
repo=""

### functions
update() {
    local _pkg="$1"

    mkdir -p -- "$ARCHIVE_DIR"

    #           pkgname-  epoch:      pkgver                    -pkgrel-  arch                  .pkg.tar.zst
    pkgname_regex="$_pkg-\([0-9]+:\)?\([0-9a-zA-Z]+\(\.\|\+\)?\)+-[0-9]+-\(x86_64\|aarch64\|any\).pkg.tar.$EXTENSION"
    pkgname=$(find "$HOME/makepkg/packages" -type f -regex "$PACKAGE_DIR/$pkgname_regex" -printf "%T@ %f\n" | sort -n | tail -n 1 | cut -d ' ' -f 2)

    if [[ -f "$PACKAGE_DIR/$pkgname" ]]; then
        sudo cp -f -- "$PACKAGE_DIR/$pkgname" "$repo_dir"
        mv -- "$PACKAGE_DIR/$pkgname" "$ARCHIVE_DIR"
        sudo repo-add -R "$repo_path" "$repo_dir/$pkgname"
    fi

    if (( $replace > 0 )) ; then
        local _pkg_number=$(find "$repo_dir" -type f -regex "$repo_dir/$pkgname_regex" -printf "%f\n" | wc -l)
        if (( $_pkg_number > 1 )); then
            error "Multiple packages with the same name \"$_pkg\" are found, please check" 3
        fi
        pkgname=$(find "$repo_dir" -type f -regex "$repo_dir/$pkgname_regex" -printf "%f\n")
        if [[ -f "$repo_dir/$pkgname" ]]; then
            sudo repo-add -R "$repo_path" "$repo_dir/$pkgname"
        fi
    fi
}

usage() {
    cat <<EOF

updaterepo

Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME -R | --replace -r | --repo <core|extra|ubuntu>
Usage: $SCRIPT_NAME -c | --clear -r | --repo <core|extra|ubuntu>

    -h, --help      display this help message and exit
    -r, --repo      build repo (core, extra, ubuntu)
    -R, --replace   replace the existing repository file with an empty one
    -c, --clear     remove the repository

EOF
}

################################################################################

while (($# > 0)); do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -r|--repo)
            shift
            repo="$1"
            ;;
        -R|--replace)
            replace=1
            ;;
        -c|--clear)
            clear=1
            ;;
        *)
            error "Unknown option \"$1\"" 127
            ;;
    esac
    shift
done

case "$repo" in
    core|extra|ubuntu)
        # ROOTDIR="LFS/<distro>/pacman"
        readarray -t pkgs < <(find $ROOTDIR/pkgbuilds/$repo/ -mindepth 1 -maxdepth 1 -type d -printf "%f\n" | LC_ALL=C sort -n)
        EXTENSION="zst"
        ;;
    # unknown repo
    *)
        error "Unknown repo \"$repo\"." 2
        ;;
esac
repo_dir="$REPO_ROOT/$repo"
repo_path="$repo_dir/$repo.db.tar.$EXTENSION"

### clear
if (( $clear > 0 )); then
    while true; do
        read -p "Do you want to clear the repository \"$repo\"? " yn
        case "$yn" in
            [Yy]*)
                sudo rm -vrf -- "$repo_dir"
                # sudo find "$repo_dir" -type f -delete
                info "Repository \"$repo\" has been removed"
                exit 0
                ;;
            [Nn]*)
                exit 0
                ;;
            *)
                echo "Please answer yes(y) or no(n)."
                ;;
        esac
    done
fi

if [[ ! -d "$repo_dir" ]]; then
    sudo mkdir -p -- "$repo_dir"
fi

if (( $replace > 0 )); then
    sudo find "$repo_dir" -name "$repo.db.tar.$EXTENSION" -delete
fi

if [[ ! -f "$repo_path" ]]; then
    info "Creating empty repo: $repo.db.tar.$EXTENSION..."
    sudo repo-add "$repo_path"
    info "Done"
fi

## special cases
for pkgbase in "${pkgs[@]}"; do
    info "Updating $pkgbase..."
    update "$pkgbase"
    case "$pkgbase" in
        zlib)
            update minizip
            ;;
        audit)
            update python-audit
            ;;
        lvm2)
            update device-mapper
            ;;
        linux)
            update linux-headers
            ;;
        lapack)
            update blas
            update cblas
            update lapacke
            ;;
    esac
done

if [ -z $(find "$PACKAGE_DIR" -empty) ]; then
   warn "$PACKAGE_DIR is not empty, please check"
fi

### error codes
# 2: Unknown repo
# 3: Multiple packages with the same name are found
# 127: Unknown option
