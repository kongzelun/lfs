#!/bin/bash
# 
# updaterepo
#

REPODIR=/home/.repository
PACKAGEDIR=~/makepkg/packages
ARCHIVEDIR=~/makepkg/archive
EXTENSION="zst"

# options
replace=0
clear=0
target=""

# functions
update() {
    local repo
    repo=$1
    local pkg
    pkg=$2

    if [ ! -d $ARCHIVEDIR ]; then
        mkdir $ARCHIVEDIR
    fi

    #           pkgname-  epoch:      pkgver                    -pkgrel-  arch                  .pkg.tar.zst
    pkgname_regex="$pkg-\([0-9]+:\)?\([0-9a-zA-Z]+\(\.\|\+\)?\)+-[0-9]+-\(x86_64\|aarch64\|any\).pkg.tar.$EXTENSION"

    # `-t` option removes the trailing newline from each line read.
    readarray -t pkgnames < <(find "$HOME/makepkg/packages" -type f -regex "$HOME/makepkg/packages/$pkgname_regex" -printf "%T@ %f\n" | sort -n | cut -d ' ' -f 2-)

    if [ ${#pkgnames[@]} -gt 1 ]; then
        printf "Multiple packages with the same name \"%s\" are found.\n" "$pkg"
        exit 3
    elif [ ${#pkgnames[@]} -le 0 ]; then
        return 0
    else
        pkgname=${pkgname[0]}
    fi

    # remove existing package in the repo with the same name and version
    if [ -f $REPODIR/$repo/$pkgname ]; then
        sudo rm -f $REPODIR/$repo/$pkgname
    fi

    sudo cp $PACKAGEDIR/$pkgname $REPODIR/$repo
    mv $PACKAGEDIR/$pkgname $ARCHIVEDIR
    sudo repo-add -R $REPODIR/$repo/$repo.db.tar.$EXTENSION $REPODIR/$repo/$pkgname

    if [ $replace -gt 0 ] ; then
        pkgname=$(find $REPODIR/$repo -type f -regex "$REPODIR/$repo/$pkgname_regex" -printf "%f\n")
        if [ -f $REPODIR/$repo/$pkgname ]; then
            sudo repo-add -R $REPODIR/$repo/$repo.db.tar.$EXTENSION $REPODIR/$repo/$pkgname
        fi
    fi
}

usage() {
    local _usage="
update_repo (kzl-linux) %s
\"update-repo\" will update the pacman repository.

Usage: update_repo [ -c | -R ] [ -t repo ]

    -h, --help      display this help message and exit
    -t, --target    build target (kzl, rpi, tegra, ubuntu)
    -R, --replace   replace the specified old repository
    -c, --clear     clear the specified repository
"
    echo "${_usage}"
}

################################################################

set -e
set -u
set -o pipefail
# set -x

umask 0022

while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -t|--target)
            shift
            target="$1"
            ;;
        -R|--replace)
            replace=1
            ;;
        -c|--clear)
            clear=1
            ;;
        *)
            printf "Unknown option \"$1\"\n";
            exit 1
            ;;
    esac
    shift
done

case $target in
    kzl)
        readarray -t pkgs < <(find $ROOTDIR/pkgbuilds/$target -maxdepth 1 -type d)
        EXTENSION="zst"
        ;;
    # unknown repo
    *)
        printf "Unknown target repo \"%s\".\n" "$target"
        exit 2
        ;;
esac

# clear
if [ $clear -gt 0 ]; then
    while true; do
        read -p "Do you want to clear the repository \"$target\"? " yn
        case $yn in
            [Yy]*)
                sudo rm -vrf $REPODIR/$target
                echo "Repository \"$target\" has been removed."
                exit 0
                ;;
            [Nn]*)
                exit 0
                ;;
            *)
                echo "Please answer yes(y) or no(n)."
                ;;
        esac
    done
fi

if [ ! -d "$REPODIR/$target" ]; then
    sudo mkdir -p "$REPODIR/$target"
fi

if [ ! -f "$REPODIR/$target/$target.db.tar.$EXTENSION" ]; then
    sudo repo-add "$REPODIR/$target/$target.db.tar.$EXTENSION"
fi

if [ $replace -gt 0 ]; then
    sudo find "$REPODIR/$target" -name "$target.db.tar.$EXTENSION" -delete
fi

if [ ! -f "$REPODIR/$target/$target.db.tar.$EXTENSION" ]; then
    sudo repo-add "$REPODIR/$target/$target.db.tar.$EXTENSION"
fi

### special cases
for pkgbase in ${pkgs[@]}; do
    update $target $pkgbase
    case $pkgbase in
        zlib)       update $target minizip ;;
        audit)      update $target python-audit ;;
        lvm2)       update $target device-mapper ;;
        linux)      update $target linux-headers ;;
        lapack)     update $target blas
                    update $target cblas
                    update $target lapacke ;;
        libc++)     update $target "libc\+\+" ;;
    esac
done

# 1: Unknown option
# 2: Unknown target repo