#!/usr/bin/bash
#
# chrootbuild.sh
#

set -e
set -u
set -o pipefail
# set -x

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
BASH_LIB_DIR=${BASH_LIB_DIR:-"/home/kzl/LFS/bash/lib"}

################################################################################

### libraries
source "$BASH_LIB_DIR/log.sh"
source "$BASH_LIB_DIR/utils.sh"
source "$BASH_LIB_DIR/chroot.sh"

### checks
check_root

### constants & variables
VERSION="1.0"

WORK_DIR="/tmp/chrootbuild"
ROOTFS_DIR="$WORK_DIR/rootfs"
PACMAN_REPO_DIR="home/.repository/kzl"
LFS_DIR="home/kzl/LFS"
MAKEPKG_DIR="home/kzl/makepkg"
MAKEPKG_SRCDEST="$MAKEPKG_DIR/sources"
USERSPEC="kzl:kzl"

rootfs_tarball=""
active_mounts=()
rootfs_pkg_list=(
    base
)

### functions
setup_rootfs() {
    local _status_file="$WORK_DIR/${FUNCNAME[0]}"

    info "Setting up chroot environment..."

    if [[ -f "$_status_file" ]]; then
        info "Chroot environment already set up"
        chroot_setup "$ROOTFS_DIR"
        return
    fi

    if [[ -d "$ROOTFS_DIR" ]]; then
        error "Non-setup rootfs directory ($ROOTFS_DIR) already exists, please delete first" 3
    fi

    if [[ -z "$rootfs_tarball" ]]; then
        error "Rootfs tarball not specified" 4
    fi

    info "Extracting rootfs tarball..."
    mkdir -p -- "$ROOTFS_DIR"
    tar -C "$ROOTFS_DIR" -xpf "$rootfs_tarball"
    info "Done"

    chroot_setup "$ROOTFS_DIR"
    chroot_run "$ROOTFS_DIR" useradd -m -G adm,wheel -U -s /bin/zsh kzl
    echo kzl:3450 | chroot_run "$ROOTFS_DIR" chpasswd

    mkdir -p -- "$ROOTFS_DIR/$PACMAN_REPO_DIR"

    touch "$_status_file"
}

mount_lfs() {
    info "Mounting LFS..."

    for dir in "$LFS_DIR" "$PACMAN_REPO_DIR" "$MAKEPKG_SRCDEST"; do
        mkdir -p -- "$ROOTFS_DIR/$dir"
        add_mount -v --bind "/$dir" "$ROOTFS_DIR/$dir"
    done

    chown -R -- "$USERSPEC" "$ROOTFS_DIR/home/kzl"

    info "Done"
}

build_debug() {
    chroot_run "$ROOTFS_DIR" /bin/zsh
}

usage() {
    cat <<EOF

Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME -V | --version
Usage: $SCRIPT_NAME -r | --rootfs <tarball>
Usage: $SCRIPT_NAME -c | --clean

    -r, --rootfs <tarball>          rootfs tarball
    -c, --clean                     clean up work files and exit
    -V, --version                   print the script version number and exit
    -h, --help                      print this help message and exit

EOF
}

clean() {
    set +e

    info "Cleaning..."

    chroot_teardown

    readarray -t mountpoints < <(grep -F "$ROOTFS_DIR" /proc/mounts | awk '{print $2}')

    if (( ${#mountpoints[@]} )); then
        error "Failed to unmount: \"${mountpoints[*]}\", try again"
        for mountpoint in "${mountpoints[@]}"; do
            umount -v -- "$mountpoint"
        done
        exit 2
    fi

    info "Done"

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap clean EXIT SIGINT SIGTERM SIGKILL

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -r | --rootfs)
        shift
        rootfs_tarball="${1:-}"
        ;;
    -c | --clean)
        clean
        rm -rf -- "$WORK_DIR"
        if [[ -z "$rootfs_tarball" ]]; then
            exit
        fi
        ;;
    -V | --version)
        echo "$version"
        exit
        ;;
    -h | --help)
        usage
        ;;
    *)
        usage
        error "Unknown option: $1" 127
        ;;
    esac
    shift
done

################################################################################

prologue

setup_rootfs
mount_lfs
build_debug
clean

epilogue

### error codes
# 1: must be run as root
# 2: failed to unmount
# 3: working directory already exists
# 4: rootfs tarball not specified
