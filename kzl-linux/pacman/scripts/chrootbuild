#!/usr/bin/bash
#
# chrootbuild.sh
#

set -e
set -u
set -o pipefail
# set -x

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
BASH_LIB_DIR=${BASH_LIB_DIR:-"/home/kzl/LFS/bash/lib"}

################################################################################

### libraries
source "$BASH_LIB_DIR/log.sh"
source "$BASH_LIB_DIR/utils.sh"
source "$BASH_LIB_DIR/chroot.sh"

### checks
check_root

### constants & variables
VERSION="1.0"

WORK_DIR="/tmp/chrootbuild"
ROOTFS_DIR="$WORK_DIR/rootfs"
PACMAN_REPO_DIR="home/.repository/kzl"
LFS_DIR="home/kzl/LFS"
MAKEPKG_DIR="home/kzl/makepkg"
MAKEPKG_SRCDEST="$MAKEPKG_DIR/sources"
USERSPEC="kzl:kzl"

active_mounts=()

build_opts=()
rootfs_tarball=""
declare -i debug=0

### functions
setup_rootfs() {
    local _status_file="$WORK_DIR/${FUNCNAME[0]}"

    info "Setting up chroot environment..."

    if [[ ! -f "$_status_file" ]]; then
        if [[ -d "$ROOTFS_DIR" ]]; then
            error "Non-setup rootfs directory ($ROOTFS_DIR) already exists, please delete first" 3
        fi

        if [[ -z "$rootfs_tarball" ]]; then
            error "Rootfs tarball not specified" 4
        fi
        info "Extracting rootfs tarball..."
        mkdir -p -- "$ROOTFS_DIR"
        tar -C "$ROOTFS_DIR" -xpf "$rootfs_tarball"
        info "Done"
    fi

    chroot_setup "$ROOTFS_DIR"

    info "Mounting LFS related directories..."
    for dir in "$LFS_DIR" "$PACMAN_REPO_DIR" "$MAKEPKG_SRCDEST"; do
        mkdir -p -- "$ROOTFS_DIR/$dir"
        chroot_add_mount -v --bind "/$dir" "$ROOTFS_DIR/$dir"
    done
    chown -R -- "$USERSPEC" "$ROOTFS_DIR/home/kzl"
    info "Done"

    if [[ ! -f "$_status_file" ]]; then
        info "Configure chroot environment..."
        chroot_run "$ROOTFS_DIR" useradd -m -G adm,wheel -U -s /bin/zsh kzl
        echo kzl:3450 | chroot_run "$ROOTFS_DIR" chpasswd
        chroot_run "$ROOTFS_DIR" sed -i '/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/s/^#//' /etc/sudoers
        chroot_run "$ROOTFS_DIR" pacman -Sy
        chroot_run "$ROOTFS_DIR" pacman -S --noconfirm pacman-contrib git
        info "Done"

        touch "$_status_file"
    fi
}

run_debug_shell() {
    chroot_run "$ROOTFS_DIR" /bin/zsh
}

run_build() {
    chroot_run "$ROOTFS_DIR" su - kzl -c "source /home/kzl/LFS/kzl-linux/pacman/setup.sh && build ${build_opts[*]}"
}

usage() {
    cat <<EOF

Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME -V | --version
Usage: $SCRIPT_NAME [ -r | --rootfs <tarball> ] [ -c | --clean ] [ -d | --debug ] [ -b | --build <options passed to \`build\`> ]

    -r, --rootfs <tarball>          rootfs tarball
    -b, --build <options>           build options
    -d, --debug                     enter debug shell
    -c, --clean                     clean up work files and exit
    -V, --version                   print the script version number and exit
    -h, --help                      print this help message and exit

EOF
}

clean() {
    set +e

    info "Cleaning..."

    chroot_teardown

    while true; do
        local mountpoint
        readarray -t mountpoints < <(grep -F "$ROOTFS_DIR" /proc/mounts | awk '{print $2}' | LC_ALL=C sort -r)

        if (( ${#mountpoints[@]} == 0 )); then
            break
        fi

        error "Failed to unmount: \"${mountpoints[*]}\", try again"
        for mountpoint in "${mountpoints[@]}"; do
            umount -v -- "$mountpoint"
        done
    done

    info "Done"

    trap - EXIT SIGINT SIGTERM SIGKILL
}
trap clean EXIT SIGINT SIGTERM SIGKILL

################################################################################

while (( $# > 0 )); do
    case "$1" in
    -b | --build)
        shift
        build_opts=("$@")
        break
        ;;
    -r | --rootfs)
        shift
        rootfs_tarball="${1:-}"
        ;;
    -d | --debug)
        debug=1
        ;;
    -c | --clean)
        clean
        rm -rf -- "$WORK_DIR"
        if [[ -z "$rootfs_tarball" ]]; then
            exit
        fi
        ;;
    -V | --version)
        echo "$version"
        exit
        ;;
    -h | --help)
        usage
        ;;
    *)
        usage
        error "Unknown option: $1" 127
        ;;
    esac
    shift
done

if (( ${#build_opts[@]} == 0 )); then
    build_opts=('--help')
fi

################################################################################

prologue

setup_rootfs
if (( debug )); then
    run_debug_shell
else
    run_build
fi
clean

epilogue

### error codes
# 1: must be run as root
# 2: failed to unmount
# 3: working directory already exists
# 4: rootfs tarball not specified
