#!/usr/bin/bash
#
# build.sh
#

set -e
set -u
set -o pipefail
# set -x

umask 0022

SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
BASH_LIB_DIR=${BASH_LIB_DIR:-"/home/kzl/LFS/bash/lib"}

################################################################################

### libraries
source "$BASH_LIB_DIR/log.sh"

### constants & variables
VERSION="1.0"

LOG_DIR="$HOME"/makepkg/log

repo=
repo_path="/home/.repository/$repo/$repo.db"
build_only_updated=0
stage=""
single_package=""
no_install=0
no_clean=0
no_check=0

# preparation
kzl_stage0_pkgs=(
)

# toolchain
kzl_stage1_pkgs=(
    ################################
    # toolchain
    ################################

    ################
    # filesystem
    ################
    iana-etc filesystem

    ################
    # glibc
    ################
    linux-api-headers
    tzdata
    glibc

    ################
    # binutils
    ################
    jansson
    zlib
    zstd
    binutils

    ################
    # gcc
    ################
    gmp isl
    mpfr mpc
    gcc

    ################################
    tzdata glibc
    jansson zlib zstd bc binutils
    gmp isl mpfr mpc gcc
    libtool
)

# base
kzl_stage2_pkgs=(
    ################################
    # base
    ################################

    ################
    # bash
    ################
    ncurses readline bash bash-completion

    ################
    # perl
    ################
    libxcrypt db gdbm perl

    ################
    # texinfo
    ################
    help2man texinfo

    ################################
    # other base-development
    ################################
    m4
    autoconf automake autoconf-archive
    bison
    flex
    ed bc
    diffutils
    patch
    which
    pkgconf

    ################
    # make
    ################
    libffi gc guile
    make

    ################
    # gettext
    ################
    libunistring icu libxml2 gettext

    ################
    # ca-certificates & openssl
    ################
    libtasn1 p11-kit ca-certificates
    openssl

    ################
    # python
    ################
    expat
    e2fsprogs keyutils libedit lmdb cyrus-sasl openldap krb5 libtirpc libnsl
    tcl sqlite
    elfutils gdb valgrind
    python

    ################
    # compression utils
    ################
    bzip2
    pcre2 less gzip
    xz
    attr acl tar

    ################
    # utils
    ################
    grep
    sed
    libsigsegv gawk
    libseccomp file
    findutils

    ################
    # shadow
    ################
    swig libcap-ng audit
    pam-config pam
    shadow

    ################
    # coreutils
    ################
    libcap coreutils

    ################
    # curl
    ################
    brotli
    libidn2
    nghttp2
    libgpg-error libgcrypt libxslt libpsl
    libssh2
    curl

    ################
    # llvm
    ################
    llvm-project

    ################
    # rust
    ################
    rust

    ################
    # util-linux
    ################
    thin-provisioning-tools argon2 libaio device-mapper json-c popt cryptsetup
    util-linux

    ################
    # iptables
    ################
    libmnl libnfnetlink libnetfilter_conntrack
    libnftnl
    dbus libnl libpcap
    iptables

    ################
    # systemd
    ################
    kbd
    kmod
    lz4
    kexec-tools
    nettle gnutls libmicrohttpd
    gperf
    rpcsvc-proto quota
    systemd
    util-linux dbus systemd

    ################
    # wget
    ################
    lzip
    wget2

    ################
    # sudo
    ################
    sudo

    ################
    # pacman
    ################
    fakeroot
    libassuan libksba npth pinentry gnupg gpgme
    libarchive
    pacman
    pacman-contrib
    arch-install-scripts

    ################
    # ps utils
    ################
    procps-ng
    psmisc

    ################
    # ip utils
    ################
    iputils
    iproute2

    ################
    # pciutils
    ################
    hwdata
    pciutils

    ################
    # usbutils
    ################
    libusb
    usbutils

    ################
    # cmake
    ################
    jsoncpp
    libuv
    rhash
    cmake

    ################
    # man-db
    ################
    groff libpipeline
    man-db

    ################
    # base
    ################
    base

    ################
    # linux-firmware
    ################
    linux-firmware
    pahole
)

kzl_stage3_pkgs=(
    ################
    # shells
    ################
    pcre zsh
    fish

    ################
    # utils
    ################
    openssh
    nano
    git

    ################
    # File system utils
    ################
    dosfstools
    f2fs-tools
    parted

    ################
    # dpkg
    ################
    libmd dpkg
    debootstrap

    ################
    # iso
    ################
    cpio dracut
    libburn libisofs libisoburn
    mtools

    ################
    # Wireless Network
    ################
    iw wpa_supplicant
    wireless-regdb

    ################
    # samba
    ################
    liburing
    samba

    ################
    # rsync
    ################
    xxhash
    rsync

    ################
    # tmux
    ################
    libevent tmux

    ################
    # texlive
    ################
    libpng
    glib2 shared-mime-info
    fontconfig freetype2 lzo pixman cairo
    graphite
    gobject-introspection
    harfbuzz freetype2
    libpaper
    nasm libjpeg-turbo
    libtiff lcms2 openjpeg
    ghostscript
    gd
    zziplib
    texlive

    ################
    # node
    ################
    # c-ares
    # node

    ################
    # other libraries
    ################
    openblas
    libpciaccess hwloc openmpi boost
    ################
    # other utils
    ################
    # tree
    # minicom
    # dfu-util
    # smartmontools
    aria2
    # libtorrent-rasterbar qbittorrent
)

### functions

prepare() {
    info "Removing pacman cache and database..."
    (yes yes || :) | sudo pacman -Scc >/dev/null 2>&1

    if [[ ! -f "$repo_path" ]]; then
        info "Creating empty repo \"$repo\"..."
        updaterepo -t "$repo" >/dev/null 2>&1
    fi
    info "Done"

    info "Synchronizing package databases..."
    (yes yes || :) | sudo pacman -Syy >/dev/null 2>&1

    if [[ -d "$LOG_DIR" ]]; then
        info "Creating log directory..."
        mkdir -p -- "$LOG_DIR"
    fi
    info "Done"
}

get_pkgbase() {
    local _pkgbase
    case "$1" in
        device-mapper)
            _pkgbase=lvm2
            ;;
        *)
            _pkgbase="$1"
            ;;
    esac
    echo "$_pkgbase"
}

build() {
    local _pkgname="$1"
    local _pkgbase=$(get_pkgbase $_pkgname)
    local _log
    local -i _updated
    local _cleanbuild
    local _clean
    local _no_check

    if [[ -n "$stage" ]]; then
        _log="$LOG_DIR"/$_pkgbase.stage$stage.log
    else
        _log="$LOG_DIR"/$_pkgbase.log
    fi

    cd "$ROOTDIR/pkgbuilds/$repo/$_pkgbase"

    # update pkgbuild
    info "Updating PKGBUILD..."
    _updated=0
    updatepkg >"$_log" 2>&1 || _updated=$?

    _cleanbuild='C'
    if (( $_updated == 255 )); then
        warning "Current version is newer"
        _updated=0
    elif (( $_updated == 0 )); then
        info "PKGBUILD is already up to date"
    elif (( $_updated == 1 )); then
        info "Package \"$_pkgbase\" is updated to new version"
        _cleanbuild='e'
    elif (( $_updated == 2 )); then
        warning "PKGUPDATE does not exist"
    elif (( $_updated >= 3 )); then
        error "Cannot update the PKGBUILD (error code: $_updated)" 4
    else
        error "Unknown \`updatepkg\` result" 6
    fi

    if (( $build_only_updated > 0 )) && (( $_updated == 0 )); then
        info "Package \"$_pkgbase\" is already the latest version, will not build (-u, --build-only-updated)."
    else
        info "Building package..."

        # if package is up to date, then update the "pkgrel"
        if (( $_updated == 0 )); then
            # update "pkgrel"
            current_pkgrel=$(cat PKGBUILD | grep -oP 'pkgrel=\K\d+$')
            new_pkgrel=$(($current_pkgrel + 1))
            sed -i "/^pkgrel=/s/$current_pkgrel/$new_pkgrel/" PKGBUILD
        fi

        _no_check=''
        if (( $no_check > 0 )); then
            _no_check='--nocheck'
        fi
        _clean=''
        if (( $no_clean <= 0 )); then
            _clean='--clean'
        fi
        # calling makepkg without `-C` since updatepkg already removed existing `$srcdir/`
        makepkg -sr"$_cleanbuild"f "$_clean" "$_no_check" --noconfirm >>"$_log" 2>&1

        info "Updating repo..."
        updaterepo -t "$repo" >>"$_log" 2>&1

        if (( $no_install <= 0 )); then
            info "Installing package..."
            # (yes yes || :) | sudo pacman -Sddy --overwrite "*" $_pkgname --config ${pacman_conf}
            (yes yes || :) | sudo pacman -Sy $_pkgname >>"$_log" 2>&1
        fi
    fi
}

usage() {
    cat <<EOF
Usage: $SCRIPT_NAME -V | --version
Usage: $SCRIPT_NAME -h | --help
Usage: $SCRIPT_NAME -r <repo> -s <stage> [ -n ] [ -u ] [ --no-clean ] [ --no-check ]
Usage: $SCRIPT_NAME -r <repo> -p <pkg> [ -n ] [ -u ] [ --no-clean ] [ --no-check ]

    -V, --version               display version information and exit
    -h, --help                  display this help message and exit
    -r, --repo                  target repository (kzl, testing, ...)
    -s, --stage                 stage (0, 1(default), 2, 3)
    -p, --package               build single package
    -n, --no-install            do not install the package after building
    -u, --build-only-updated    build the package only if the PKGBUILD is updated
    --no-clean                  skip cleaning up work files after build
    --no-check                  do not run the check() function in the PKGBUILD

EOF
}

################################################################

while (($# > 0)); do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -r|--repo)
        shift
        repo="$1"
        ;;
    -s|--stage)
        if [[ -n "$single_package" ]]; then
            error "Cannot use -s | --stage together with -p | --package" 5
        fi
        shift
        stage="$1"
        ;;
    -p|--package)
        if [[ -n "$stage" ]]; then
            error "Cannot use -p | --package together with -s | --stage" 5
        fi
        shift
        single_package="$1"
        ;;
    -n|--no-install)
        no_install=1
        ;;
    -u|--build-only-updated)
        build_only_updated=1
        ;;
    --no-clean)
        no_clean=1
        ;;
    --no-check)
        no_check=1
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 1
        ;;
    esac
    shift
done

prologue

case $repo in
    kzl)
        if [[ -n "$stage" ]]; then
            case $stage in
            0)
                updaterepo --clear -t "$repo"
                pkgs=("${kzl_stage0_pkgs[@]}")
                ;;
            1)
                pkgs=("${kzl_stage1_pkgs[@]}")
                ;;
            2)
                pkgs=("${kzl_stage2_pkgs[@]}")
                ;;
            3)
                pkgs=("${kzl_stage3_pkgs[@]}")
                ;;
            *)
                error "Unknown stage \"$stage\"" 2
                ;;
            esac
        fi
        ;;
    *)
        error "Unknown repo name \"$repo\"" 3
        ;;
esac
log_blue "Building stage $stage ($(date +%H:%M:%S))..."


prepare

if [[ -n "$single_package" ]]; then
    # Build a single package
    log_magenta "Building $single_package ($(date +%H:%M:%S))..."
    build "$single_package"
else
    for p in ${pkgs[@]}; do
        __pkg_start_time__=$(date +%s)
        log_magenta "Building $p ($(date +%H:%M:%S))..."
        build $p
        __pkg_end_time__=$(date +%s)
        __pkg_total_time__=$(($__pkg_end_time__ - $__pkg_start_time__))
        echo -e "\e[1;32m$p: $(date -d@$__pkg_total_time__ -u +%H:%M:%S) ($(date +%H:%M:%S))\e[0m"
    done
fi

epilogue

### error codes
# 1: unknown option
# 2: unknown stage
# 3: unknown repo
# 4: cannot update the PKGBUILD
# 5: cannot use -s | --stage together with -p | --package
# 6: unknown `updatepkg` result
