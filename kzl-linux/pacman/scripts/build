#!/bin/bash
# 
# build
#

set -e
# set -x

umask 0022

version=1.2

# arguments/options

script_name="$(basename "${0}")"
target=kzl
stage=1
repo_dir=
build_dir=
log_dir=

# kzl packages

# preparation
kzl_stage0_pkgs=(
    base
    pacman
)

# toolchain
kzl_stage1_pkgs=(
    linux-api-headers
    glibc
    binutils
    gcc
    libtool
    binutils glibc
)

# base
kzl_stage2_pkgs=(
    ### base
    ## filesystem
    iana-etc tzdata filesystem
    ## zlib
    zlib
    ## binutils
    binutils
    ## gcc
    gmp mpfr mpc gcc
    ## libtool pkgconf
    libtool pkgconf
    ## glibc
    glibc
    ## ncurses readline bash
    ncurses readline bash bash-completion
    ## bzip2 xz gzip
    bzip2 xz
    pcre less gzip
    ## tar
    acl attr tar
    ## grep sed gawk m4 bison flex
    grep sed gawk m4 bison flex
    ## file which findutils
    libseccomp file
    which
    findutils
    ## shadow
    keyutils openldap krb5 swig libcap-ng audit
    libxcrypt
    libtirpc pam-config pam
    shadow
    ## sudo
    openssl sudo
    ## coreutils
    libcap coreutils
    ## util-linux
    util-linux
    ## e2fsprogs
    fuse e2fsprogs
    krb5
    ## procps-ng psmisc
    procps-ng psmisc
    ## perl
    db gdbm perl
    ## autoconf automake
    diffutils autoconf
    automake
    ## patch
    ed patch
    ## make
    gc libffi libunistring guile make
    ## gettext
    icu libxml2 elfutils glib2 gettext
    ## dbus
    expat autoconf-archive dbus
    ## iproute2
    libmnl libnfnetlink libnetfilter_conntrack libnftnl libnl libpcap iptables
    iproute2
    ## iputils
    libidn2 iputils
    # systemd
    argon2 libaio hwloc ldns libedit openssh openmpi boost thin-provisioning-tools device-mapper json-c popt cryptsetup
    kbd kmod
    libgpg-error libgcrypt
    libtasn1 p11-kit
    pcre2
    ca-certificates libnghttp2 publicsuffix-list libpsl libssh2 curl
    kexec-tools
    gnu-efi
    gperf
    libusb hidapi libcbor libfido2
    nettle gnutls libmicrohttpd
    libxslt
    rpcsvc-proto quota
    systemd
    procps-ng libusb
    ## pciutils
    pciutils
    ## zstd
    lz4 zstd
    ## pacman
    libassuan npth pinentry tcl sqlite libusb-compat pcsclite gnupg gpgme
    libarchive
    pacman
    po4a fakeroot pacman-contrib arch-install-scripts
    ## python
    libnsl mpdecimal valgrind python
    ## cmake
    jsoncpp
    libuv
    rhash
    docbook itstool xmlto shared-mime-info
    cmake
    ## git
    git
    ## texinfo man-db
    texinfo 
    groff man-db
    ## linux
    bc linux-firmware
    ## base
    base
)

kzl_stage3_pkgs=(
    ### core
    ## raid
    mdadm
    ## zsh
    zsh grml-zsh-config zsh-autosuggestions zsh-syntax-highlighting
    ## initramfs
    cpio dracut
    ## iso
    squashfs-tools mtools dosfstools
    ## tmux screen
    libevent libutempter tmux screen
    ## utils
    usbutils minicom
    wpa_supplicant
    smartmontools nvme-cli
    wget
    xxhash rsync
    parted
    nano vim
    c-ares aria2
    ## devtools
    gdb llvm-project rust ruby nodejs nasm
    ## fontconfig
    libpng freetype2 graphite harfbuzz freetype2 fontconfig
    ## texlive
    texlive
    ## samba
    lmdb jansson liburing samba
    ## nfs-utils
    rpcbind gssproxy 
    # ## Xlib
    # xorg-util-macros xorgproto libxau libxdmcp xcb-proto libxcb xtrans libx11 libice libsm libxt libxext libxrender libxpm
    # ## ffmpeg

    ### testing
    # 
    # intel-mkl lapack
    # help2man
)

# functions

prepare() {
    (yes yes || :) | sudo pacman -Scc

    if [ ! -f /home/.repository/$target/$target.db ]; then
        update-repo -t $target
    fi

    (yes yes || :) | sudo pacman -Syy
}

get_pkgbase() {
    local pkgbase
    case $1 in
        device-mapper)      pkgbase=lvm2 ;;
        *)                  pkgbase=$1 ;;
    esac
    echo "$pkgbase"
}

update_key() {
    local pkgbase
    local pkgname
    pkgname=$1
    pkgbase=$(get_pkgbase $pkgname)

    cd $ROOTDIR/$target/pkgbuilds/$pkgbase

    updpkgsums > /dev/null
    gpg --recv-keys $(grep -E -o "[0-9A-F]{40}" PKGBUILD)
}

build() {
    local pkgbase
    local pkgname
    pkgname=$1
    pkgbase=$(get_pkgbase $pkgname)

    cd $ROOTDIR/$target/pkgbuilds/$pkgbase

    local log
    if [ -z $stage ]; then
        log="$log_dir"/$pkgbase.log
    else
        log="$log_dir"/$pkgbase.stage$stage.log
    fi
    if [ -f $log ]; then
        rm $log
    fi
    
    makepkg -scCf --noconfirm --nocheck &>> $log

    update-repo -t $target
    # (yes yes || :) | sudo pacman -Scc
    (yes yes || :) | sudo pacman -Sddy --overwrite "*" $pkgname # --config ${pacman_conf}
}

usage() {
    errno=0
    if [ -n "$1" ]; then
        echo "$1"
        errno=1
    fi

    printf "lfs-build (kzl-linux) %s\n" "$version"
    echo
    printf "lfs-build will build packages from scratch.\n"
    echo
    printf "Usage: lfs-build [options]\n"
    echo
    echo "    -h, --help        display this help message and exit"
    echo "    -v, --version     display version information and exit"
    echo "    -t, --target      build target (kzl(default), rpi, tegra, ubuntu)"
    echo "    -s, --stage       stage (stage0, stage1(default), stage2, stage3)"
    echo

    exit ${errno}
}

################################################################################
# program start
################################################################################

while [ -n "$1" ]; do
    case "$1" in
    -h|--help)
        usage
        ;;
    -v|--version)
        echo "$version"
        exit 0
        ;;
    -t|--target)
        target="$2"
        shift 2
        ;;
    -s|--stage)
        stage="$2"
        shift 2
        ;;
    *)
        usage "Unknown option: $1"
        ;;
    esac
done

case $target in
    kzl)
        build_dir=/tmp
        case $stage in
        0)
            update-repo --clear -t $target
            pkgs=${kzl_stage0_pkgs[@]}
            ;;
        1)
            pkgs=${kzl_stage1_pkgs[@]}
            ;;
        2)
            pkgs=${kzl_stage2_pkgs[@]}
            ;;
        3)
            pkgs=${kzl_stage3_pkgs[@]}
            ;;
        *)
            printf "Unknown stage \"$stage\""
            exit 1
            ;;
        esac
        ;;
    *)
        echo "Unknown target \"$target\""
        exit 1
        ;;
esac

repo_dir=/home/.repository/$target
log_dir=$build_dir

start_time=$(date +%s)

prepare

# for p in ${pkgs[@]}; do
#     echo "update keys for $p ..."
#     update_key $p &
# done
# wait

for p in ${pkgs[@]}; do
    echo "****************************************************************"
    echo "    building $p ..."
    echo "****************************************************************"
    if [ $p != 'base' ]; then
        update_key $p
    fi
    build $p
done

end_time=$(date +%s)
total_time=$((end_time-start_time))

echo "****************************************************************"
echo "                Execution time Information                "
echo "****************************************************************"
echo "${script_name} : End time - $(date)"
echo "${script_name} : Total time - $(date -d@${total_time} -u +%H:%M:%S)"
