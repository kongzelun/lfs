#!/usr/bin/bash
#
# build.sh
#

script_name="$(basename "${0}")"
repo=kzl
log_dir=~/makepkg/log
repo_dir=/home/.repository/$repo
build_only_updated=0
stage=""
single_package=""
no_install=0
no_clean=0
no_check=0

# preparation
kzl_stage0_pkgs=(
)

# toolchain
kzl_stage1_pkgs=(
    ################################
    # toolchain
    ################################

    ################
    # filesystem
    ################
    iana-etc filesystem

    ################
    # glibc
    ################
    linux-api-headers
    tzdata
    glibc

    ################
    # binutils
    ################
    jansson
    zlib
    zstd
    binutils

    ################
    # gcc
    ################
    gmp isl
    mpfr mpc
    gcc

    ################################
    tzdata glibc
    jansson zlib zstd bc binutils
    gmp isl mpfr mpc gcc
    libtool
)

# base
kzl_stage2_pkgs=(
    ################################
    # base
    ################################

    ################
    # bash
    ################
    ncurses readline bash bash-completion

    ################
    # perl
    ################
    libxcrypt db gdbm perl

    ################
    # texinfo
    ################
    help2man texinfo

    ################################
    # other base-development
    ################################
    m4
    autoconf automake autoconf-archive
    bison
    flex
    ed bc
    diffutils
    patch
    which
    pkgconf

    ################
    # make
    ################
    libffi gc guile
    make

    ################
    # gettext
    ################
    libunistring icu libxml2 gettext

    ################
    # ca-certificates & openssl
    ################
    libtasn1 p11-kit ca-certificates
    openssl

    ################
    # python
    ################
    expat
    e2fsprogs keyutils libedit lmdb cyrus-sasl openldap krb5 libtirpc libnsl
    tcl sqlite
    python

    ################
    # compression utils
    ################
    bzip2
    pcre2 less gzip
    xz
    attr acl tar

    ################
    # utils
    ################
    grep
    sed
    libsigsegv gawk
    libseccomp file
    findutils

    ################
    # shadow
    ################
    swig libcap-ng audit
    pam-config pam
    shadow

    ################
    # coreutils
    ################
    libcap coreutils

    ################
    # curl
    ################
    brotli
    libidn2
    nghttp2
    libgpg-error libgcrypt libxslt libpsl
    libssh2
    curl

    ################
    # llvm
    ################
    llvm-project

    ################
    # rust
    ################
    rust

    ################
    # util-linux
    ################
    thin-provisioning-tools argon2 libaio device-mapper json-c popt cryptsetup
    util-linux

    ################
    # iptables
    ################
    libmnl libnfnetlink libnetfilter_conntrack
    libnftnl
    dbus libnl libpcap
    iptables

    ################
    # systemd
    ################
    elfutils
    kbd
    kmod
    lz4
    kexec-tools
    nettle gnutls libmicrohttpd
    gnu-efi
    gperf
    rpcsvc-proto quota
    systemd
    util-linux dbus systemd

    ################
    # wget
    ################
    lzip
    wget2

    ################
    # sudo
    ################
    sudo

    ################
    # pacman
    ################
    fakeroot
    libassuan libksba npth pinentry gnupg gpgme
    libarchive
    pacman
    pacman-contrib
    arch-install-scripts

    ################
    # ps utils
    ################
    procps-ng
    psmisc

    ################
    # ip utils
    ################
    iputils
    iproute2

    ################
    # pciutils
    ################
    hwdata
    pciutils

    ################
    # usbutils
    ################
    libusb
    usbutils

    ################
    # cmake
    ################
    jsoncpp
    libuv
    rhash
    cmake

    ################
    # man-db
    ################
    groff libpipeline
    man-db

    ################
    # base
    ################
    base

    ################
    # linux-firmware
    ################
    linux-firmware
)

kzl_stage3_pkgs=(
    ################
    # openssh
    ################
    openssh

    ################
    # shells
    ################
    pcre zsh
    fish

    ################
    # nano
    ################
    nano

    ################
    # git
    ################
    git

    ################################
    # File system utils
    ################################
    # dosfstools
    # f2fs-tools
    # parted

    ################
    # dracut
    ################
    # cpio
    # dracut

    ################################
    # Wireless Network
    ################################
    # iw
    # wpa_supplicant

    ################
    # samba
    ################
    # liburing
    # samba

    ################
    # node
    ################
    # c-ares
    # node

    ################
    # texlive
    ################
    libpng
    glib2 shared-mime-info
    fontconfig freetype2 lzo pixman cairo
    graphite
    gobject-introspection
    harfbuzz freetype2
    libpaper
    nasm libjpeg-turbo
    libtiff lcms2 openjpeg
    ghostscript
    gd
    zziplib
    texlive

    ################
    # tmux
    ################
    # libevent tmux

    ################
    # rsync
    ################
    # xxhash
    # rsync

    ################
    # aria2
    ################
    # aria2

    ################
    # other libraries
    ################
    # openblas

    ################
    # other utils
    ################
    # libmd dpkg
    # debootstrap
    # tree
    # minicom
    # dfu-util
    # mtools
    # smartmontools
)

# functions

# Show an INFO message
# $1: message string
info() {
    local _msg="$1"
    printf '[%s] INFO: %s\n' "$script_name" "$_msg"
}

# Show a WARNING message
# $1: message string
warning() {
    local _msg="$1"
    printf '[%s] WARNING: %s\n' "$script_name" "$_msg" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
error() {
    local _msg="$1"
    local _error="$2"
    printf '[%s] ERROR: %s\n' "$script_name" "$_msg" >&2
    if [ "$_error" -gt 0 ]; then
        exit "$_error"
    fi
}

prepare() {
    info "Removing pacman cache and database..."
    (yes yes || :) | sudo pacman -Scc > /dev/null 2>&1

    if [ ! -f /home/.repository/$repo/$repo.db ]; then
        info "Creating empty repo \"$repo\"..."
        updaterepo -t $repo > /dev/null 2>&1
    fi
    info "Synchronizing package databases..."
    (yes yes || :) | sudo pacman -Syy > /dev/null 2>&1

    if [ -d "$log_dir" ]; then
        info "Creating log directory..."
        mkdir -p "$log_dir"
    fi
}

get_pkgbase() {
    local _pkgbase
    case $1 in
        device-mapper)
            _pkgbase=lvm2
            ;;
        *)
            _pkgbase=$1
            ;;
    esac
    echo "$_pkgbase"
}

build() {
    local _pkgbase
    local _pkgname
    local _updated
    local _cleanbuild
    local _clean
    local _no_check
    local _log

    _pkgname=$1
    _pkgbase=$(get_pkgbase $_pkgname)
    if [ -n "$stage" ]; then
        _log="$log_dir"/$_pkgbase.stage$stage.log
    else
        _log="$log_dir"/$_pkgbase.log
    fi

    # remove existing log
    if [ -f $_log ]; then
        rm $_log
    fi

    cd $ROOTDIR/pkgbuilds/$repo/$_pkgbase

    # update pkgbuild
    info "Updating PKGBUILD..."
    _updated=0
    updatepkg >> $_log 2>&1 || _updated=$?

    _cleanbuild='C'
    if [ "$_updated" -eq 255 ]; then
        warning "Current version is newer."
        _updated=0
    elif [ "$_updated" -eq 0 ]; then
        info "PKGBUILD is up to date."
    elif [ "$_updated" -eq 1 ]; then
        info "Package \"$_pkgbase\" is updated."
        _cleanbuild='e'
    elif [ "$_updated" -eq 2 ]; then
        warning "PKGUPDATE does not exist."
    elif [ "$_updated" -ge 3 ]; then
        error "Cannot update the PKGBUILD (error code: $_updated)." 4
    else
        error "Unknown \`updatepkg\` result." 6
    fi

    if [ "$build_only_updated" -gt 0 ] && [ "$_updated" -eq 0 ]; then
        info "Package \"$_pkgbase\" is already the latest version, will not build (-u, --build-only-updated)."
    else
        info "Building package..."

        # if package is up to date, then update the "pkgrel"
        if [ "$_updated" -eq 0 ]; then
            # update "pkgrel"
            current_pkgrel=$(cat PKGBUILD | grep -oP 'pkgrel=\K\d+$')
            new_pkgrel=$((current_pkgrel + 1))
            sed -i "/^pkgrel=/s/$current_pkgrel/$new_pkgrel/" PKGBUILD
        fi

        _no_check=''
        if [ "$no_check" -gt 0 ]; then
            _no_check='--nocheck'
        fi
        _clean=''
        if [ "$no_clean" -le 0 ]; then
            _clean='--clean'
        fi
        # calling makepkg without `-C` since updatepkg already removed existing `$srcdir/`
        makepkg -sr"$_cleanbuild"f $_clean $_no_check --noconfirm >> $_log 2>&1

        info "Updating repo..."
        updaterepo -t $repo >> $_log 2>&1

        if [ "$no_install" -le 0 ]; then
            info "Installing package..."
            # (yes yes || :) | sudo pacman -Sddy --overwrite "*" $_pkgname --config ${pacman_conf}
            (yes yes || :) | sudo pacman -Sy $_pkgname >> $_log 2>&1
        fi
    fi
}

usage() {
    local _usage="
build (kzl-linux)

build will build packages from scratch.

Usage: build -r <repo> -s | -p <pkg> [ -n ] [ -u ] [ --no-clean ] [ --no-check ]

    -h, --help                  display this help message and exit
    -r, --repo                  target repository (kzl, testing, ...)
    -s, --stage                 stage (0, 1(default), 2, 3)
    -p, --package               build single package
    -n, --no-install            do not install the package after building
    -u, --build-only-updated    build the package only if the PKGBUILD is updated
    --no-clean                  skip cleaning up work files after build
    --no-check                  do not run the check() function in the PKGBUILD
    -v, --version               display version information and exit
"
    echo "$_usage"
}

################################################################

set -e
set -o pipefail
set -u
# set -x

umask 0022

while [ $# -gt 0 ]; do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -r|--repo)
        shift
        repo="$1"
        ;;
    -s|--stage)
        if [ -z "$single_package" ]; then
            shift
            stage="$1"
        else
            error "Cannot use -s | --stage together with -p | --package" 5
        fi
        ;;
    -p|--package)
        if [ -z "$stage" ]; then
            shift
            single_package="$1"
        else
            error "Cannot use -p | --package together with -s | --stage" 5
        fi
        ;;
    -n|--no-install)
        no_install=1
        ;;
    -u|--build-only-updated)
        build_only_updated=1
        ;;
    --no-clean)
        no_clean=1
        ;;
    --no-check)
        no_check=1
        ;;
    *)
        usage
        error "Unknown option: \"$1\"" 1
        ;;
    esac
    shift
done

case $repo in
    kzl)
        if [ -n "$stage" ]; then
            case $stage in
            0)
                updaterepo --clear -t $repo
                pkgs=${kzl_stage0_pkgs[@]}
                ;;
            1)
                pkgs=${kzl_stage1_pkgs[@]}
                ;;
            2)
                echo -e "\033[1;33mBuilding stage 2 ($(date +%H:%M:%S))...\033[0m"
                pkgs=${kzl_stage2_pkgs[@]}
                ;;
            3)
                echo -e "\033[1;33mBuilding stage 3 ($(date +%H:%M:%S))...\033[0m"
                pkgs=${kzl_stage3_pkgs[@]}
                ;;
            *)
                error "Unknown stage \"$stage\"" 2
                ;;
            esac
        fi
        ;;
    *)
        error "Unknown repo name \"$repo\"" 3
        ;;
esac

start_time=$(date +%s)

prepare

if [ ! -z "$single_package" ]; then
    # Build a single package
    echo -e "\\e[1;31mBuilding $single_package ($(date +%H:%M:%S))...\\e[0m"
    build $single_package
else
    for p in ${pkgs[@]}; do
        pkg_start_time=$(date +%s)
        echo -e "\e[1;31mBuilding $p ($(date +%H:%M:%S))...\e[0m"
        build $p
        pkg_end_time=$(date +%s)
        pkg_total_time=$((pkg_end_time-pkg_start_time))
        echo -e "\e[1;32m$p: $(date -d@$pkg_total_time -u +%H:%M:%S) ($(date +%H:%M:%S))\e[0m"
    done
fi

end_time=$(date +%s)
total_time=$((end_time-start_time))

echo -e "\e[1;30m"
echo -e "****************************************************************"
echo -e "                Execution time Information                "
echo -e "****************************************************************"
echo -e "[$script_name]: End time - $(date)"
echo -e "[$script_name]: Total time - $(date -d@$total_time -u +%H:%M:%S)"
echo -e "\e[0m"
