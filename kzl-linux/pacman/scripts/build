#!/bin/bash
#
# build.sh
#
# TODO: build only updated pkgs

SCRIPT_LEVEL_EMPH='\033[1;30m'

script_name="$(basename "${0}")"
stage=1
build_dir=/tmp
repo=kzl
log_dir=$build_dir
repo_dir=/home/.repository/$repo

# preparation
kzl_stage0_pkgs=(
)

# toolchain
kzl_stage1_pkgs=(
)

# base
kzl_stage2_pkgs=(
    ### base
    ## filesystem
    iana-etc # tzdata filesystem
)

kzl_stage3_pkgs=(
)

# functions

prepare() {
    (yes yes || :) | sudo pacman -Scc

    if [ ! -f /home/.repository/$repo/$repo.db ]; then
        update-repo -t $repo
    fi

    (yes yes || :) | sudo pacman -Syy
}

get_pkgbase() {
    local _pkgbase
    case $1 in
        device-mapper)
            _pkgbase=lvm2
            ;;
        *)
            _pkgbase=$1
            ;;
    esac
    echo "$_pkgbase"
}

build() {
    local _pkgbase
    local _pkgname
    local _updated
    local _log

    _pkgname=$1
    _pkgbase=$(get_pkgbase $_pkgname)
    _log="$log_dir"/$_pkgbase.stage$stage.log

    cd $ROOTDIR/pkgbuilds/$repo/$_pkgbase

    _updated=$(bash PKGUPDATE)

    if [ -f $_log ]; then
        rm $_log
    fi

    # makepkg -scCf --noconfirm --nocheck &>> $_log
    makepkg -scCf --noconfirm --nocheck &>> $_log

    update-repo -t $repo
    # (yes yes || :) | sudo pacman -Sddy --overwrite "*" $_pkgname --config ${pacman_conf}
    (yes yes || :) | sudo pacman -Sddy --overwrite "*" $_pkgname
}

usage() {
    local _usage="
build (kzl-linux)

build will build packages from scratch.

Usage: lfs-build [options]

    -h, --help      display this help message and exit
    -r, --repo      target repository (kzl, testing, ...)
    -s, --stage     stage (0, 1(default), 2, 3)
    -v, --version   display version information and exit
"
    echo "$_usage"
}

################################################################

set -e
set -o pipefail
set -u
# set -x

umask 0022

while [ $# -gt 0 ]; do
    case "$1" in
    -h|--help)
        usage
        exit 0
        ;;
    -r|--repo)
        shift
        repo="$1"
        ;;
    -s|--stage)
        shift
        stage="$1"
        ;;
    *)
        usage
        echo "Unknown option: \"$1\""
        exit 1
        ;;
    esac
    shift
done

case $repo in
    kzl)
        case $stage in
        0)
            update-repo --clear -t $repo
            pkgs=${kzl_stage0_pkgs[@]}
            ;;
        1)
            pkgs=${kzl_stage1_pkgs[@]}
            ;;
        2)
            echo -e "\033[1;33mBuilding stage 2\033[0m"
            pkgs=${kzl_stage2_pkgs[@]}
            ;;
        3)
            pkgs=${kzl_stage3_pkgs[@]}
            ;;
        *)
            printf "Unknown stage \"$stage\""
            exit 1
            ;;
        esac
        ;;
    *)
        echo "Unknown repo name \"$repo\""
        exit 2
        ;;
esac

start_time=$(date +%s)

prepare

for p in ${pkgs[@]}; do
    pkg_start_time=$(date +%s)
    echo -e "\033[1;31mBuilding $p ...\033[0m"
    build $p
    pkg_end_time=$(date +%s)
    pkg_total_time=$((pkg_end_time-pkg_start_time))
    echo -e "$p: End time - $(date)"
    echo -e "$p: Total time - $(date -d@$pkg_total_time -u +%H:%M:%S)"
done

end_time=$(date +%s)
total_time=$((end_time-start_time))

echo -e "$SCRIPT_LEVEL_EMPH"
echo -e "****************************************************************"
echo -e "                Execution time Information                "
echo -e "****************************************************************"
echo -e "$script_name : End time - $(date)"
echo -e "$script_name : Total time - $(date -d@$total_time -u +%H:%M:%S)"
echo -e "\033[0m"
